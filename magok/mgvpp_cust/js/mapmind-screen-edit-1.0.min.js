$(document).ready(function () {
	if(screenRole == "ROLE_SYSTEM"){
		let screenManagement = $("<a />");
		screenManagement.attr("href", "javascript:void(0)");
		screenManagement.attr("title", "메인화면 변경");
		screenManagement.addClass("modify");
		$("#login").children(".setbox").append(screenManagement);
		screenManagement.on("click", function(){
			$(".editTool").toggle();
		});
	}
	
	// 화면 편집
	initEditScreen();
	procWidget();

	// 프리셋 템플릿 선정
	for (presetName in preset) {
		let presetEntry = preset[presetName];
		let presetDesc = presetEntry.description;
		let presetThubmnail = presetEntry.thumbnail;
		let presetTitle = presetEntry.title;

		let liItem = $("<li />");
		liItem.addClass("presetTemplateLi");
		liItem.attr("data-template", presetName);

		let presetImg = $("<img />");
		presetImg.attr("src", CTX + "/img/" + presetThubmnail);
		presetImg.css("width", "400px");
		presetImg.css("height", "300px");
		liItem.append(presetImg);

		let presetDetailDiv = $("<div />");
		presetDetailDiv.css("display", "inline-block");
		presetDetailDiv.css("height", "300px");
		presetDetailDiv.css("vertical-align", "bottom");
		presetDetailDiv.css("padding-left", "30px");

		let presetTitleH2 = $("<h2 />");
		presetTitleH2.text(presetTitle);
		presetDetailDiv.append(presetTitleH2);

		let descriptionFragment = $("<div />");
		for (var i = 0; i < presetDesc.length; i++) {
			let descriptionSpan = $("<p />");
			descriptionSpan.text(presetDesc[i]);
			descriptionFragment.append(descriptionSpan);
		}
		presetDetailDiv.append(descriptionFragment);


		liItem.append(presetDetailDiv);

		$("#presetTemplateUl").append(liItem);
	}
	$(".presetTemplateLi").on("click", function () {
		$(".presetTemplateLi").removeClass("selected");
		$(this).addClass("selected");
		$("#presetTemplateSelectBtn").attr("data-preset", $(this).attr("data-template"));
	});

	// 컨텐츠 추가
	for (contents in WIDGET_TEMPLATES) {
		let dataType = contents;
		let contentsObj = WIDGET_TEMPLATES[dataType];

		let liItem = $("<li />");
		liItem.addClass("sampleWidget");
		liItem.attr("data-type", dataType);

		let widgetSampleImg = $("<img />");
		widgetSampleImg.attr("src", CTX + "/img/" + contentsObj.sample_img);
		widgetSampleImg.css("width", "140px");
		widgetSampleImg.css("height", "140px");
		widgetSampleImg.css("padding", "20px 45px");
		widgetSampleImg.css("box-sizing", "content-box");
		liItem.append(widgetSampleImg);


		let liDetail = $("<div />");
		liDetail.addClass("sampleWidgetTitleBox");
		let widgetSampleTitle = $("<h2 />");
		widgetSampleTitle.text(contentsObj.title);
		liDetail.append(widgetSampleTitle);

		let descriptionFragment = $("<div />");
		for (var i = 0; i < contentsObj.description.length; i++) {
			let descriptionSpan = $("<p />");
			descriptionSpan.text(contentsObj.description[i]);
			descriptionFragment.append(descriptionSpan);
		}
		liDetail.append(descriptionFragment);

		liItem.append(liDetail);
		$("#widgetSampleUl").append(liItem);
	}
	$("#widgetSampleUl").mousewheel(function (event, delta) {
		this.scrollLeft -= (delta * 200);
		event.preventDefault();
	});
	$(".sampleWidget").on("mouseenter", function () {
		//console.log("A");
	});
	$(".sampleWidget").on("mouseleave", function () {
		//console.log("B");
	});
	$(".sampleWidget").on("click", function () {
		$(".sampleWidget").removeClass("selected");
		$(this).addClass("selected");
		$(".sampleWidget").attr("data-selected", "N");
		$(this).attr("data-selected", "Y");

		let dataType = $(this).attr("data-type");
		$("#appendWidgetDataType").val(dataType);

		let sampleWidgetTitleText = "제목없음";
		let sampleWidgetParam = null;
		try {
			sampleWidgetTitleText = WIDGET_TEMPLATES[dataType].title;
			WIDGET_TEMPLATES[dataType].getter_function(WIDGET_TEMPLATES[dataType].sample_param, $("#widgetSamplePreview")[0]);
			$("#appendWidgetSearchParam").val(WIDGET_TEMPLATES[dataType].sample_param_text);
			//$("#appendWidgetSearchParam").val(JSON.stringify(WIDGET_TEMPLATES[dataType].sample_param, null, 4));
		} catch (e) {
			console.log("제목을 찾지 못함");
		}
		$("#widgetSamplePriviewTitleText").text(sampleWidgetTitleText);
		$(".previewAppenderClass[data-base='Y']").prop("checked", true).trigger("change");
		$(".previewAppenderTitle[data-base='Y']").prop("checked", true).trigger("change");

	});
	$(".previewAppenderClass").on("change", function () {
		let selectedStyleClassGroupName = $(this).attr("name");
		$(".previewAppenderClass[name=" + selectedStyleClassGroupName + "]").each(function (idx, item) {
			$("#widgetSamplePreview").removeClass($(item).val());
		});
		let selectedStyleClass = $(this).val();
		$("#widgetSamplePreview").addClass(selectedStyleClass);
		let currentApplyStyleClass = $("#widgetSamplePreview").attr("class").replace("widgetSamplePreview", "").trim();
		$("#appendWidgetClass").val(currentApplyStyleClass);
	});
	$(".previewAppenderTitle").on("change", function () {
		let titleStatus = $(this).val();
		if (titleStatus == "show") {
			$("#appendWidgetTitle").prop("checked", true);
			$("#widgetSamplePriviewTitle").show();
			$("#widgetSamplePriviewContent").removeClass("notitle");
		} else {
			$("#appendWidgetTitle").prop("checked", false);
			$("#widgetSamplePriviewTitle").hide();
			$("#widgetSamplePriviewContent").addClass("notitle");
		}
	});
	$(".colorChipBox > label > .previewAppenderClass").on("change", function(){
		if($(this).prop("checked")){
			$(this).parent().parent().children("label").each(function(){
				$(this).removeClass("colorChipBoxChecked");
			});
			$(this).parent().addClass("colorChipBoxChecked");
		}
	});
});















/**
 * @description
 * 모든 위젯의 데이터를 처리하는 함수
 */
function procWidget() {
	$(".widget").each(function (idx, item) {
		let dataType = $(item).attr("data-type");
		let searchParam = $(item).attr("data-param");
		try {
			searchParam = JSON.parse(searchParam);
		} catch (e) {
			console.error("파라미터 설정이 잘못 되었습니다.");
		}
		if (dataType != null && dataType != "" && typeof dataType != "undefined") {
			setDataWithDataType(dataType, searchParam, item);
		}
	});
}

/**
 * @description
 * 편집 모듈을 초기화 하는 함수 - 화면 최초 로딩시 1회 수행
 */
function initEditScreen() {
	currentScreenData = JSON.parse(Base64.decode(serverScreenData));
	$("#saveComment").val(serverScreenComment);
	$("#overrideBtn").removeClass("disable");
	$("#trashCan").droppable({
		accept: ".widget"
		, drop: function (event, ui) {
			$(ui.draggable).remove();
			checkOverlapWidget();
		}
		, tolerance: "pointer"
	});
	setScreenFromData();
	$(document).on("mouseup", ".widget", function (event) {
		if (event.button == 2 || event.which == 3) {
			if (isEditable()) {
				window.oncontextmenu = function () {
					return false;
				};
				$(".editContextMenuWrap").css("top", event.clientY);
				$(".editContextMenuWrap").css("left", event.clientX);
				$(".editContextMenuWrap").slideDown(100);

				currentContextWidget = $(this);
			}
		}
	});
	$(document).on("mousemove", function (event) {
		let mouseX = event.clientX;
		let mouseY = event.clientY;

		let contextStartX = parseInt($(".editContextMenuWrap").css("left").replace("px", ""));
		let contextStartY = parseInt($(".editContextMenuWrap").css("top").replace("px", ""));
		let contextEndX = contextStartX + parseInt($(".editContextMenuWrap").css("width").replace("px", ""));
		let contextEndY = contextStartY + parseInt($(".editContextMenuWrap").css("height").replace("px", ""));

		if (!(mouseX > (contextStartX - 10) && mouseX < (contextEndX + 10)
			&& mouseY > (contextStartY - 10) && mouseY < (contextEndY + 10)
		)) {
			$(".editContextMenuWrap").slideUp(100);
			window.oncontextmenu = function () {
				return true;
			};
			currentContextWidget = null;
		}
	});
}

/**
 * @description
 * 현재 편집 가능한 모드인가 확인하는 함수
 * @return boolean
 */
function isEditable() {
	let mode = $("#editHandler").attr("data-mode");
	if (mode == "edit") {
		return true;
	} else {
		return false;
	}
}
/**
 * @description
 * 현재 모드를 변경하는 함수
 */
function changeEditMode() {
	let mode = $("#editHandler").attr("data-mode");
	if (mode == "edit") {
		// 편집버튼의 모드 속성 변경
		$("#editHandler").attr("data-mode", "show");
		// 편집버튼의 스타일 변경
		$("#editStartBtn").removeClass("disable");
		$("#editStartBtn").addClass("enable");
		// 편집 외의 버튼의 스타일 변경
		$("#loadBeforeBtn").removeClass("enable");
		$("#loadBeforeBtn").addClass("disable");
		$("#loadTemplateBtn").removeClass("enable");
		$("#loadTemplateBtn").addClass("disable");
		$("#changeOverBgBtn").removeClass("enable");
		$("#changeOverBgBtn").addClass("disable");
		$("#addWidgetBtn").removeClass("enable");
		$("#addWidgetBtn").addClass("disable");
		$("#justActivateBtn").removeClass("enable");
		$("#justActivateBtn").addClass("disable");
		// $("#editFinishBtn").removeClass("enable");
		// $("#editFinishBtn").addClass("disable");
		// 컨텐츠영역에 그리드 스타일 변경
		$("#contentsArea").removeClass("editable-grid");
		// 컨텐츠영역 리사이즈
		$("#contentsArea").resizable("destroy");
		// 위젯 편집 여부 변경
		toggleWidgetEditableAll("OFF");
		// 오버랩 div 스타일 변경
		$(".overlapArea").hide();
		// 휴지통 스타일 변경
		$("#trashCan").hide();
	} else {
		// 편집버튼의 모드 속성 변경
		$("#editHandler").attr("data-mode", "edit");
		// 편집버튼의 스타일 변경
		$("#editStartBtn").removeClass("enable");
		$("#editStartBtn").addClass("disable");
		// 편집 외의 버튼의 스타일 변경
		$("#loadBeforeBtn").removeClass("disable");
		$("#loadBeforeBtn").addClass("enable");
		$("#loadTemplateBtn").removeClass("disable");
		$("#loadTemplateBtn").addClass("enable");
		$("#changeOverBgBtn").removeClass("disable");
		$("#changeOverBgBtn").addClass("enable");
		$("#addWidgetBtn").removeClass("disable");
		$("#addWidgetBtn").addClass("enable");
		$("#justActivateBtn").removeClass("disable");
		$("#justActivateBtn").addClass("enable");
		// $("#editFinishBtn").removeClass("disable");
		// $("#editFinishBtn").addClass("enable");
		// 컨텐츠영역에 그리드 스타일 변경
		$("#contentsArea").addClass("editable-grid");
		// 컨텐츠영역 리사이즈
		$("#contentsArea").resizable({
			handles: "s"
			, resize: function (event, ui) {
				// 20픽셀씩 높이 조정 가능하게
				let size = Math.round(ui.size.height / 20) * 20;
				ui.size.height = size;
				// 가장 아래에 위치한 위젯보다 컨텐츠 영역을 줄이지 못하도록
				let bottomWidgetPosition = 0;
				$(ui.element).children(".widget").each(function (idx, item) {
					let currentWidgetPosition = $(item).offset().top + parseInt($(item).css("height").replace("px", ""));
					if (bottomWidgetPosition < currentWidgetPosition) {
						bottomWidgetPosition = currentWidgetPosition;
					}
				});
				if (bottomWidgetPosition >= $("#contentsArea").offset().top + size) {
					ui.size.height = bottomWidgetPosition - $("#contentsArea").offset().top;
				}
			}
			, minHeight: 200
		});
		// 위젯 편집 여부 변경
		toggleWidgetEditableAll("ON");
		// 오버랩 div 스타일 변경
		$(".overlapArea").show();
		// 휴지통 스타일 변경
		$("#trashCan").show();
	}
}
/**
 * @description
 * 편집 모드를 시작하는 함수
 */
function editStart() {
	if (!isEditable()) {
		changeEditMode();
		setScreenFromData();
		checkOverlapWidget();
	}
}
function saveScreenData(saveType, activeType, data, comment) {
	let encodeData = Base64.encode(JSON.stringify(data));
	let saveUrl = "";
	let paramObj = {
		mainNo: data.mainNo
		, screenData: encodeData
		, screenComment: comment
		, active: activeType
	}
	switch (saveType) {
		case "make":
			// 신규로 저장 후 새로고침
			saveUrl = CTX + "/manage/addScreenDataAjax";
			break;
		case "override":
			// 덮어쓰기로 저장 후 새로고침
			saveUrl = CTX + "/manage/modScreenDataAjax";
			break;
	}

	$.ajax({
		url: saveUrl
		, method: "POST"
		, data: JSON.stringify(paramObj)
		, dataType: "json"
		, success: function (result) {
			if (result.status == true) {
				location.reload();
			} else {
				alert(result.message);
			}
		}
		, error: function (xhr, stat, err) {
			console.log(xhr);
			console.log(stat);
			console.log(err);
		}
	});
}
/**
 * @description
 * 편집 모드를 종료하는 함수
 */
function editFinish(saveType, activeType, comment) {
	//if (isEditable()) {
		let hasOutbound = false;
		$(".widget").each(function (idx, widget) {
			let top = parseInt($(widget).css("top").replace("px", ""));
			let left = parseInt($(widget).css("left").replace("px", ""));
			if (top < 0 || left < 0) {
				hasOutbound = true;
			}
		});
		if (hasOutbound) {
			alert("위치를 지정하지 않은 위젯이 남아 있습니다.");
		} else {
			if(isEditable()){
				changeEditMode();
			}
			currentScreenData = getScreenToData();
			if(saveType == "notsave"){
				setScreenFromData();
				procWidget();
			}else{
				saveScreenData(saveType, activeType, currentScreenData, comment);
			}
		}
	//}
}

/**
 * @description
 * 저장하는 레이어를 여는 함수
 */
function openSave() {
	//if (isEditable()) {
		let selectedMainNo = $("#contentsArea").attr("data-main-no");
		$("#overrideBtn").removeClass("disable");
		if (selectedMainNo == "-1") {
			$("#overrideBtn").addClass("disable");
		}
		$("#saveWrap").show();
		$("#subModal").show();
	//}
}
/**
 * @description
 * 저장하는 레이어를 닫는 함수
 */
function closeSave() {
	$("#saveWrap").hide();
	$("#subModal").hide();
}

/**
 * @description
 * 지난 작업 내용을 불러오는 레이어를 여는 함수
 */
function openLoadBefore() {
	if (isEditable()) {
		$("#loadWrap").show();
		$("#subModal").show();
		loadSearch();
	}
}
/**
 * @description
 * 지난 작업 내용을 불러오는 레이어를 닫는 함수
 */
function closeLoadBefore() {
	$("#loadWrap").hide();
	$("#subModal").hide();
}

/**
 * @description
 * 미리 정의된 템플릿을 선택하는 레이어를 여는 함수
 */
function openTemplate() {
	if (isEditable()) {
		$("#selectPresetWrap").show();
		$("#subModal").show();
	}
}
/**
 * @description
 * 미리 정의된 템플릿을 선택하는 레이어를 닫는 함수
 */
function closeTemplate() {

	$(".presetTemplateLi").removeClass("selected");
	$("#presetTemplateSelectBtn").attr("data-preset", "");

	$("#selectPresetWrap").hide();
	$("#subModal").hide();
}

/**
 * @description
 * 상단 배경을 켜고 끄는 함수
 * @param {object} obj DOM Element object
 */
function changeOverBg(obj) {
	if (isEditable()) {
		let sw = $(obj).attr("data-sw");
		if (sw == "ON") {
			$(obj).attr("data-sw", "OFF");
			$(obj).removeClass("over-bg-sw");
			$(".main").removeClass("over-bg");
		} else {
			$(obj).attr("data-sw", "ON");
			$(obj).addClass("over-bg-sw");
			$(".main").addClass("over-bg");
		}
	}
}

let currentContextWidget = null;
function changeTitle(mode) {
	switch (mode) {
		case "edit":
			if ($("#widgetSamplePriviewTitleText").text().trim() != "__________") {
				let newTitle = prompt("변경 할 제목을 입력 하세요.", $("#widgetSamplePriviewTitleText").text());
				if (newTitle != null) {
					$("#widgetSamplePriviewTitleText").text(newTitle);
				}
			}
			break;
		case "context":
			let beforeTitleH2 = currentContextWidget.children(".widgetTitle");
			if (typeof beforeTitleH2.text() != "undefined") {
				let newTitle = prompt("변경 할 제목을 입력 하세요.", beforeTitleH2.text());
				if (newTitle != null) {
					beforeTitleH2.text(newTitle);
				}
			}
			break;
	}
}

/**
 * @description
 * 위젯을 수정하는 함수
 */
function modifyWidget() {
	if(currentModifyWidget != null && typeof currentModifyWidget != "undefined") {
		
		let beforeWidgetParam = {
			top: parseInt(currentModifyWidget.css("top").replace("px", ""))
			, left: parseInt(currentModifyWidget.css("left").replace("px", ""))
			, width: parseInt(currentModifyWidget.css("width").replace("px", ""))
			, height: parseInt(currentModifyWidget.css("height").replace("px", ""))
		}

		currentModifyWidget.remove();
		
		appendWidget("modify", beforeWidgetParam);
		checkOverlapWidget();
	}
}
let currentModifyWidget = null;
/**
 * @description
 * 위젯을 수정하는 레이어를 여는 함수
 */
function openModifyWidget(object) {
	if (isEditable()) {
		
		currentModifyWidget = object;

		$("#appendWidgetWrap").show();
		$("#subModal").show();

		$("#widgetSampleUl").hide();
		$("#appendWidgetBtnParts").hide();
		$("#modifyWidgetBtnParts").show();
		$("#appendWidgetWrapTitle").text("컨텐츠 수정 하기");

		$(".sampleWidget").removeClass("selected");
		$(".sampleWidget").attr("data-selected", "N");

		let dataType = $(currentModifyWidget).attr("data-type");
		$("#appendWidgetDataType").val(dataType);

		let sampleWidgetTitleText = null;
		try{
			sampleWidgetTitleText = $(currentModifyWidget).find("h2").text();
		}catch(e){
			console.error(e);
		}
		let sampleWidgetParam = JSON.parse($(currentModifyWidget).attr("data-param"));

		WIDGET_TEMPLATES[dataType].getter_function(sampleWidgetParam, $("#widgetSamplePreview")[0]);
		$("#appendWidgetSearchParam").val(JSON.stringify(sampleWidgetParam, null, 4));

		if(sampleWidgetTitleText != null && typeof sampleWidgetTitleText != "undefined" && sampleWidgetTitleText != ""){
			$("#widgetSamplePriviewTitleText").text(sampleWidgetTitleText);
			$("#previewAppenderTitle0").prop("checked", true).trigger("change");
		}else{
			$("#previewAppenderTitle1").prop("checked", true).trigger("change");
		}

		let activeClass = $(currentModifyWidget).attr("data-class").split(" ");
		for(var i=0 ; i<activeClass.length ; i++){
			let entry = activeClass[i].trim();
			if(entry != ""){
				$(".previewAppenderClass").each(function(){
					let radioValue = $(this).val();
					if(entry == radioValue){
						$(this).prop("checked", true).trigger("change");
						$("#widgetSamplePreview").addClass(entry);
						$("#widgetSamplePreview").attr("data-class", $("#widgetSamplePreview").attr("data-class") + " " + entry);
					}
				});
			}
		}
		
	}
}
/**
 * @description
 * 위젯을 수정하는 레이어를 닫는 함수
 */
function closeModifyWidget() {
	$("#appendWidgetWrap").hide();
	$("#subModal").hide();
	initPreview();
	
	$("#widgetSampleUl").show();
	$("#appendWidgetBtnParts").show();
	$("#modifyWidgetBtnParts").hide();
	$("#appendWidgetWrapTitle").text("컨텐츠 추가 하기");
	currentModifyWidget = null;
}

/**
 * @description
 * 위젯을 추가하는 레이어를 여는 함수
 */
function openAppendWidget() {
	if (isEditable()) {
		$("#appendWidgetWrap").show();
		$("#subModal").show();
	}
}
/**
 * @description
 * 위젯을 추가하는 레이어를 닫는 함수
 */
function closeAppendWidget() {
	$("#appendWidgetWrap").hide();
	$("#subModal").hide();
	initPreview();
}
/**
 * @description
 * 위젯을 추가하는 함수
 */
function appendWidget(type, param) {
	let dataType;
	let searchParam;
	let widgetClass;
	let widgetTitleText;
	let widgetTitleFlag;
	let widgetTop;
	let widgetLeft;
	let widgetWidth;
	let widgetHeight;

	let continueFlag = true;
	if (type == "edit" || type == "modify") {
		let selectedSampleWidget = $(".sampleWidget[data-selected=Y]");
		if (selectedSampleWidget.length != 1 && type == "edit") {
			continueFlag = false;
			alert("컨텐츠를 선택하세요.");
		}

		dataType = $("#appendWidgetDataType").val();
		searchParam = $("#appendWidgetSearchParam").val();
		widgetClass = $("#appendWidgetClass").val();
		if(type == "modify"){
			widgetTop = param.top;
			widgetLeft = param.left;
			widgetWidth = param.width;
			widgetHeight = param.height;
		}else{
			widgetTop = 0;
			widgetLeft = -220;
			widgetWidth = 200;
			widgetHeight = 200;
		}
		widgetTitleFlag = $("#appendWidgetTitle").prop("checked");
		widgetTitleText = $("#widgetSamplePriviewTitleText").text();
	} else {
		dataType = "empty";
		searchParam = {};
		widgetClass = "";
		widgetTop = 0;
		widgetLeft = -120;
		widgetWidth = 100;
		widgetHeight = 100;
		widgetTitleText = "제목 없음";
		try { widgetTitleFlag = param.title; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetTitleText = param.titleText; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { dataType = param.dataType; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { searchParam = JSON.stringify(param.searchParam); } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetClass = param.class; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetTop = param.position.top; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetLeft = param.position.left; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetWidth = param.size.width; } catch (e) { console.log("파라미터 값 찾지 못함"); }
		try { widgetHeight = param.size.height; } catch (e) { console.log("파라미터 값 찾지 못함"); }
	}
	if (continueFlag) {
		// 위젯 dom 생성
		let widget = $("<div />");
		widget.addClass("widget");
		widget.addClass(widgetClass);
		widget.attr("data-class", widgetClass);
		widget.css("position", "absolute");
		widget.css("width", widgetWidth + "px");
		widget.css("height", widgetHeight + "px");
		// 위젯에 설정 값 적용
		widget.attr("data-type", dataType);
		widget.attr("data-param", searchParam);
		// 컨텐츠 영역 외부에 최초 배치
		widget.css("top", widgetTop + "px");
		widget.css("left", widgetLeft + "px");
		// 사이즈뷰어 dom 생성
		let widgetSize = $("<div />");
		widgetSize.addClass("widget-size");
		widgetSize.text(widgetWidth + "px * " + widgetHeight + "px");
		// 사이즈뷰어 위젯에 첨부
		widget.append(widgetSize);
		toggleWidgetEditable(widget, "ON");

		if (widgetTitleFlag) {
			let widgetTitle = $("<h2 />");
			widgetTitle.addClass("widgetTitle");
			let title = widgetTitleText;
			widgetTitle.text(title);
			widget.append(widgetTitle);
		}

		let widgetContent = $("<div />");
		widgetContent.addClass("widgetContent");
		if (widgetTitleFlag) {
			widget.attr("data-title", "Y");
		} else {
			widgetContent.addClass("notitle");
			widget.attr("data-title", "N");
		}
		let description = ["정의되지 않음"];
		try {
			description = WIDGET_TEMPLATES[dataType].description;
		} catch (e) {
			console.log("설명을 찾지 못함");
		}
		let descriptionFragment = $("<div />");
		descriptionFragment.css("text-align", "center");
		for (var i = 0; i < description.length; i++) {
			let descriptionSpan = $("<span />");
			descriptionSpan.css("display", "block");
			descriptionSpan.css("padding-top", "10px");
			descriptionSpan.css("padding-bottom", "10px");
			descriptionSpan.text(description[i]);
			descriptionFragment.append(descriptionSpan);
		}
		widgetContent.append(descriptionFragment);
		widget.append(widgetContent);

		// 위젯을 컨텐츠영역 dom 내부에 첨부
		$("#contentsArea").append(widget);
		// 위젯 추가 레이어 닫기
		closeAppendWidget();
	}
}

/**
 * @description
 * 데이터 뽑아오기
 */
function setWidgetData(data, widget) {
	$($(widget).children(".widgetContent")[0]).html("");
	let dataWrap = $("<div />");
	dataWrap.css("position", "absolute");
	dataWrap.css("white-space", "normal");
	dataWrap.css("width", "inherit");
	dataWrap.css("height", "inherit");
	dataWrap.append(data);
	$($(widget).children(".widgetContent")[0]).append(dataWrap);
}
/**
 * @description
 * 데이터 타입으로 데이터 뽑아오기
 */
function setDataWithDataType(dataType, searchParam, widget) {
	try {
		WIDGET_TEMPLATES[dataType].getter_function(searchParam, widget);
	}
	catch (e) {
		$(widget).text("함수가 존재하지 않습니다.");
		console.error(e);
	}
}
/**
 * @description
 * 편집용 컨텐츠 타입
 */
const WIDGET_TEMPLATES = {
	empty_widget: {
		title: "비어있는 위젯"
		, description: [
			"비어있는 위젯 입니다."
			, "테두리로 사용하기 위해 추가 하십시오."
		]
		, sample_img: "widget-ct.png"
		, getter_function: drawEmptyWidget
		, sample_param: {}
		, sample_param_text: `{}`
	}
	, energy_save_rate: {
		title: "에너지 자립률"
		, description: [
			"에너지 자립률의 개요가 표현 됩니다."
			, "500px * 300px 이상 권장"
		]
		, sample_img: "energy_save_rate.png"
		, getter_function: drawEnergySaveRate
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
				, scope: "building"
			}
			, roundingDigits: 2
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
       yyyy: "2020"
       , mm: "09"
       , dd: "02"
       , scope: "building" // scope는 "city", "block", "building" 중 택 1
    }
    , roundingDigits: 2 // 소숫점 몇 번째 자리로 반올림 하고자 하는지
}`
	}
	, renew_equip_status: {
		title: "신재생 자원 설비 현황"
		, description: [
			"파이 차트와 범례가 표현 됩니다."
			, "500px * 300px 이상 권장"
		]
		, sample_img: "pie-ct.png"
		, getter_function: drawRenewEquipStatus
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
				, scope: "building"
			}
			, chartType: "pie"
			, legend: "bottom"
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
       yyyy: "2020"
       , mm: "09"
       , dd: "02"
       , scope: "building" // scope는 "city", "block", "building" 중 택 1
    }
    , chartType: "pie" // chartType은 "pie", "donut" 중 택 1
    , legend: "bottom" // "top", "left", "right", "bottom", "none" 중 택 1
}`
	}
	, power_load_status: {
		title: "전기사용량 모니터링"
		, description: [
			"라인 차트와 범례가 표현 됩니다."
			, "1000px * 300px 이상 권장"
			, "가로로 긴 영역에 추천 됩니다."
		]
		, sample_img: "line-ct.png"
		, getter_function: drawLoadStatus
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
				, scope: "building"
			}
			, chartType: "line"
			, chartDot: false
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
        yyyy: "2020"
        , mm: "09"
        , dd: "02"
        , scope: "building" // scope는 "city", "block", "building" 중 택 1
    }
    , chartType: "line" // chartType은 "line", "area", "bar" 중 택 1
    , chartDot: false // 라인에 점을 나타낼지 여부 true / false
}`
	}
	, temp_1: { //asdf
		title: "에너지 공급 현황"
		, description: [
			"에너지 공급 현황 정보가 표현 됩니다."
			, "600px * 100px 이상 권장"
		]
		, sample_img: "energy_save_rate.png"
		, getter_function: drawWorking
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
			}
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
       yyyy: "2020"
       , mm: "09"
       , dd: "02"
    }
}`
	}
	, temp_2: { //asdf
		title: "수요 현황"
		, description: [
			"수요 현황 정보가 표현 됩니다."
			, "600px * 100px 이상 권장"
		]
		, sample_img: "energy_save_rate.png"
		, getter_function: drawWorking
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
			}
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
       yyyy: "2020"
       , mm: "09"
       , dd: "02"
       , scope: "building"
    }
}`
	}
	, mapPowerLoad: {
		title: "전력 사용량 지도"
		, description: [
			"전력 사용량 지도 입니다."
			, "사이즈에 구애받지 않습니다."
			, "정사각형 사이즈를 권장 합니다."
		]
		, sample_img: "map-ct.png"
		, getter_function: drawMap
		, sample_param: {
			searchParam: {
				searchDate: "" + (new Date().getFullYear()) + "-"
					+ ((new Date().getMonth() + 1) < 10 ? "0" + (new Date().getMonth() + 1) : "" + (new Date().getMonth() + 1)) + "-"
					+ (new Date().getDate() < 10 ? "0" + (new Date().getDate()) : "" + (new Date().getDate()))
			}
			, colorList: [
				{ color:   "#6ac2fc", range: 50,  rangeCheck: "less" }
				, { color: "#79dd7e", range: 100, rangeCheck: "less" }
				, { color: "#ffcd56", range: 150, rangeCheck: "less" }
				, { color: "#ff9f40", range: 200, rangeCheck: "less" }
				, { color: "#ff2251", range: 200, rangeCheck: "greaterThan" }
			]
			, legend: "Y"
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        searchDate: "" + (new Date().getFullYear()) + "-"
                    + ((new Date().getMonth() + 1) < 10 ? "0" + (new Date().getMonth() + 1) : "" + (new Date().getMonth() + 1)) + "-"
                    + (new Date().getDate() < 10 ? "0" + (new Date().getDate()) : "" + (new Date().getDate()))
        */
        searchDate: "2020-12-29"
    }
    , colorList: [
        { color:   "#6ac2fc" , range: 50 ,  rangeCheck: "less" }
        , { color: "#79dd7e" , range: 100 , rangeCheck: "less" }
        , { color: "#ffcd56" , range: 150 , rangeCheck: "less" }
        , { color: "#ff9f40" , range: 200 , rangeCheck: "less" }
        , { color: "#ff2251" , range: 200 , rangeCheck: "greaterThan" }
    ]
    , legend: "Y" // "Y", "N" 범례 여부
}`
	}
	, weather_info: {
		title: "날씨 정보"
		, description: [
			"날씨 정보가 표현 됩니다."
			, "600px * 100px 이상 권장"
		]
		, sample_img: "weather.png"
		, getter_function: drawWeatherInfo
		, sample_param: {
			searchParam: {
				yyyy: "2020"
				, mm: "09"
				, dd: "02"
			}
			, present: [
				"temperatures"
			]
		}
		, sample_param_text: `{
    searchParam: {
        /*
        // 오늘 날짜 조회할 경우 작성 예시
        yyyy: ""+(new Date().getFullYear())
        , mm: (new Date().getMonth() + 1) < 10 ? "0"+(new Date().getMonth() + 1) : ""+(new Date().getMonth() + 1)
        , dd: new Date().getDate() < 10 ? "0"+(new Date().getDate()) : ""+(new Date().getDate())
        */
       yyyy: "2020"
       , mm: "09"
       , dd: "02"
    }
    , present: [ // 표현하고자 하는 것을 array로 작성
        "temperatures" // 기온
        // 추후 추가 예정
    ]
}`
	}
	, board_notice: {
		title: "공지사항"
		, description: [
			"공지사항 최근 게시물이 표현 됩니다."
			, "500px * 400px 이상 권장"
		]
		, sample_img: "board_notice.png"
		, getter_function: drawNotice
		, sample_param: {
			listType: "large"
			, entryClick: true
		}
		, sample_param_text: `{
    listType: "large" // "large", "medium", "small" 중 택1
    , entryClick: true // 엔트리 클릭시 해당 게시물로 이동 여부
}`
	}
	, board_other: {
		title: "OOO 게시판"
		, description: [
			"게시판의 최근 게시물이 표현 됩니다."
			, "파라미터에 따라 게시판을 변경하여 사용할 수 있습니다."
			, "타이틀을 변경하여 사용하세요."
			, "500px * 400px 이상 권장"
		]
		, sample_img: "board_other.png"
		, getter_function: drawBoard
		, sample_param: {
			boardType: "0003"
			, menuId: "M090300"
			, listType: "small"
			, entryClick: true
		}
		, sample_param_text: `{
    boardType: "0003" // 게시판 코드 참조
    , menuId: "M090300" // 메뉴 관리 참조
    , listType: "small" // "large", "medium", "small" 중 택1
    , entryClick: true // 엔트리 클릭시 해당 게시물로 이동 여부
}`
	}
	, event_notification: {
		title: "알람 및 이벤트"
		, description: [
			"게시판의 최근 게시물이 표현 됩니다."
			, "파라미터에 따라 게시판을 변경하여 사용할 수 있습니다."
			, "타이틀을 변경하여 사용하세요."
			, "500px * 300px 이상 권장"
		]
		, sample_img: "event_notification.png"
		, getter_function: drawNotification
		, sample_param: {
			notification: [
				"event"
				, "alarm"
			]
			, showAtOnce: 3
		}
		, sample_param_text: `{
    notification: [ // 노티할 것들을 작성
        "event"
        , "alarm"
    ]
    , showAtOnce: 3 // 한 번에 보여줄 노티피케이션
}`
	}
};
/**
 * 위젯이 겹쳐있는지 확인하는 함수
 */
function checkOverlapWidget() {
	/**
	 * 하나씩 찾는 이너 함수
	 * @param {object} currentDom 현재 핸들링 하고 있는 위젯 jquery object
	 */
	function entryCheck(currentDom) {
		let extents = [];
		// 모든 위젯을 검사한다.
		$(".widget").each(function (idx, widgets) {
			let entryX = parseInt($(widgets).css("left").replace("px", ""));
			let entryY = parseInt($(widgets).css("top").replace("px", ""));
			let entryWidth = parseInt($(widgets).css("width").replace("px", ""));
			let entryHeight = parseInt($(widgets).css("height").replace("px", ""));
			let entryExtent = {
				x: [entryX, entryX + entryWidth]
				, y: [entryY, entryY + entryHeight]
				, dom: $(widgets)
			};
			// 모든 위젯의 고유값으로 x와 y의 범위를 취한다.
			extents.push(entryExtent);
		});

		// 현재 위젯의 정보를 추출한다.
		let currentX = parseInt(currentDom.css("left").replace("px", ""));
		let currentY = parseInt(currentDom.css("top").replace("px", ""));
		let currentWidth = parseInt(currentDom.css("width").replace("px", ""));
		let currentHeight = parseInt(currentDom.css("height").replace("px", ""));
		let currentExtent = {
			x: [currentX, currentX + currentWidth]
			, y: [currentY, currentY + currentHeight]
			, dom: currentDom
		};

		// 현재 위젯과 겹치는 위젯이 있는지 확인한다.
		for (var i = 0; i < extents.length; i++) {
			let xFlag = false;
			let yFlag = false;

			// 1. 현재의 x 시작이 비교대상의 x 사이에 있으면 x겹침
			if (currentExtent.x[0] > extents[i].x[0] && currentExtent.x[0] < extents[i].x[1]) {
				xFlag = true;
			}
			// 2. 현재의 x 종료가 비교대상의 x 사이에 있으면 x겹침
			if (currentExtent.x[1] > extents[i].x[0] && currentExtent.x[1] < extents[i].x[1]) {
				xFlag = true;
			}

			// 3. 현재의 y 시작이 비교대상의 y 사이에 있으면 y겹침
			if (currentExtent.y[0] > extents[i].y[0] && currentExtent.y[0] < extents[i].y[1]) {
				yFlag = true;
			}
			// 4. 현재의 y 종료이 비교대상의 y 사이에 있으면 y겹침
			if (currentExtent.y[1] > extents[i].y[0] && currentExtent.y[1] < extents[i].y[1]) {
				yFlag = true;
			}

			// 5. 현재의 x시작이 비교대상의 x 시작보다 작으면서, 현재의 x 종료가 비교대상의 x 종료보다 크면 x겹침
			if (currentExtent.x[0] < extents[i].x[0] && currentExtent.x[1] > extents[i].x[1]) {
				xFlag = true;
			}
			// 6. 현재의 y시작이 비교대상의 y 시작보다 작으면서, 현재의 y 종료가 비교대상의 y 종료보다 크면 y겹침
			if (currentExtent.y[0] < extents[i].y[0] && currentExtent.y[1] > extents[i].y[1]) {
				yFlag = true;
			}

			// 7. 현재와 비교대상의 위치와 크기가 모두 같으면 x, y 겹침
			if (currentExtent.x[0] == extents[i].x[0] && currentExtent.x[1] == extents[i].x[1]
				 && currentExtent.y[0] == extents[i].y[0] && currentExtent.y[1] == extents[i].y[1]
				 && currentExtent.dom[0] != extents[i].dom[0]
				 ) {
				xFlag = true;
				yFlag = true;
			}

			// x겹침과 y겹침이 동시에 발생하면 겹친 것으로 간주한다.
			if (xFlag || yFlag) {

				// 겹친 곳에 오버랩 div 를 생성하기 위하여 겹친 부분을 찾아서 추가한다.
				let startX = (extents[i].x[0] > currentExtent.x[0]) ? extents[i].x[0] : currentExtent.x[0];
				let endX = (extents[i].x[1] < currentExtent.x[1]) ? extents[i].x[1] : currentExtent.x[1];

				let startY = (extents[i].y[0] > currentExtent.y[0]) ? extents[i].y[0] : currentExtent.y[0];
				let endY = (extents[i].y[1] < currentExtent.y[1]) ? extents[i].y[1] : currentExtent.y[1];

				let overlapArea = $("<div />");
				overlapArea.addClass("overlapArea");

				overlapArea.css("width", (endX - startX) + "px");
				overlapArea.css("height", (endY - startY) + "px");

				overlapArea.css("top", startY + "px");
				overlapArea.css("left", startX + "px");

				overlapArea.css("z-index", "100");
				overlapArea.css("pointer-events", "none");

				$("#contentsArea").append(overlapArea);
			}
		}
	}

	// 이너 함수를 호출 하기 전에 기존의 오버랩 div를 모두 제거한다.
	$(".overlapArea").remove();
	// 모든 위젯을 돌면서 이너 함수를 호출한다.
	// 이렇게 하는 이유는 현재 리사이져블이나 드래거블 함수에서 핸들링 하지 않고 있는 위젯도 검사해야 하기 때문이다.
	$(".widget").each(function (idx, widgets) {
		entryCheck($(widgets));
	});
	// 모든 위젯을 돌면서 이너 함수를 호출하면 동일하게 겹친다고 판단하여 2개씩 오버랩이 되는 경우가 발생한다.
	// 이를 제가 히기 위해 오버랩이 정확히 동일한 포지션과 사이즈를 갖는다면, 제거한다.
	let beforePosition = [];
	$(".overlapArea").each(function (idx, item) {
		let itemX = parseInt($(item).css("left").replace("px", ""));
		let itemY = parseInt($(item).css("top").replace("px", ""));
		let itemWidth = parseInt($(item).css("width").replace("px", ""));
		let itemHeight = parseInt($(item).css("height").replace("px", ""));

		let currentObject = {
			x: itemX
			, y: itemY
			, width: itemWidth
			, height: itemHeight
		}

		function hasSamePosition(currentPosision) {
			let retValue = false;
			for (var i = 0; i < beforePosition.length; i++) {
				if (
					beforePosition[i].x == currentPosision.x
					&& beforePosition[i].y == currentPosision.y
					&& beforePosition[i].width == currentPosision.width
					&& beforePosition[i].height == currentPosision.height
				) {
					retValue = true;
					break;
				}
			}
			return retValue;
		}

		if (beforePosition.length == 0) {
			beforePosition.push(currentObject);
		} else {
			let hasSameFlag = hasSamePosition(currentObject);
			if (hasSameFlag) {
				$(item).remove();
			} else {
				beforePosition.push(currentObject);
			}
		}
	});
}
function toggleWidgetEditableAll(mode) {
	$(".widget").each(function (idx, item) {
		toggleWidgetEditable($(item), mode);
	});
}
let currentHandleWidgetInfo;
function toggleWidgetEditable(widget, mode) {
	switch (mode) {
		case "ON":
			// 위젯 드래그 가능하게
			widget.draggable({ disabled: false });
			widget.draggable({
				grid: [20, 20]
				//, containment: "parent"
				, cursor: "move"
				, opacity: 0.3
				, revertDuration: 150
				, start: function (event, ui) {
					ui.helper.css("position", "absolute");
					currentHandleWidgetInfo = {
						top: ui.helper.css("top")
						, left: ui.helper.css("left")
					}
					$(".widget").draggable("option", "revert", true);
				}
				, stop: function (event, ui) {
					checkOverlapWidget();
				}
				, drag: function (event, ui) {
					checkOverlapWidget();
				}
			});
			$("#contentsArea").droppable({
				accept: ".widget"
				, tolerance: "fit"
				, drop: function (event, ui) {
					const box = $(ui.draggable).html();
					$(".widget").draggable("option", "revert", false);
					let afterTop = parseInt(ui.helper.css("top").replace("px", ""));
					let afterLeft = parseInt(ui.helper.css("left").replace("px", ""));
					$(ui.draggable).detach().css({ top: afterTop, left: afterLeft }).appendTo(this);
				}
			});
			// 위젯 사이즈변경 가능하게
			widget.resizable({
				grid: [20, 20]
				, handles: "all"
				, containment: "parent"
				, minWidth: 100
				, maxWidth: 1400
				, minHeight: 100
				, resize: function (event, ui) {
					// 위젯의 현재 사이즈 확인
					let widgetX = parseInt($(ui.element).css("width").replace("px", ""));
					let widgetY = parseInt($(ui.element).css("height").replace("px", ""));
					// 위젯에 첨부된 사이즈뷰어 추출
					let widgetSizeViewer = $(ui.element).children(".widget-size")[0];
					// 사이즈뷰어에 사이즈 기록 및 사이즈뷰어 보이도록 설정
					$(widgetSizeViewer).text(widgetX + "px * " + widgetY + "px");
					$(widgetSizeViewer).css("display", "flex");

					checkOverlapWidget();
				}
				, stop: function (event, ui) {
					// 리사이징이 끝나면 사이즈뷰어 안보이게 설정
					let widgetSizeViewer = $(ui.element).children(".widget-size")[0];
					$(widgetSizeViewer).css("display", "none");

					//checkOverlapWidget();
				}
			});
			break;
		case "OFF":
			widget.resizable("destroy");
			widget.draggable({ disabled: true });
			break;
	}
}

/**
 * UTF-8을 지원하는 Base64
 */
const Base64 = {
	// private property
	_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	// public method for encoding
	encode: function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		input = Base64._utf8_encode(input);

		while (i < input.length) {

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}

			output = output +
				this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
				this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		}

		return output;
	},

	// public method for decoding
	decode: function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		output = Base64._utf8_decode(output);

		return output;

	},

	// private method for UTF-8 encoding
	_utf8_encode: function (string) {
		string = string.replace(/\r\n/g, "\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if ((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},

	// private method for UTF-8 decoding
	_utf8_decode: function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;

		while (i < utftext.length) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if ((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i + 1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i + 1);
				c3 = utftext.charCodeAt(i + 2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	}
}

/**
 * 현재 화면 데이터를 저장하는 변수
 */
let currentScreenData;

/**
 * @description
 * 현재 화면 구성을 데이터로 뽑아내는 함수
 * @return {object} 화면구성데이터
 */
function getScreenToData() {
	let overBgFlag = false;
	if ($(".main").attr("class").indexOf("over-bg") > -1) {
		overBgFlag = true;
	}
	let backgroundHeight = parseInt($("#contentsArea").css("height").replace("px", ""));
	let mainNo = parseInt($("#contentsArea").attr("data-main-no"));
	let widgets = [];
	$(".widget").each(function (idx, widget) {
		let titleFlag = ($(widget).attr("data-title") == "Y") ? true : false;
		let searchParam = {};
		try {
			let jsonText = $(widget).attr("data-param");
			jsonText = jsonText.replace(/(['"])?([a-z0-9A-Z_]+)(['"])?:/g, '"$2": ');
			jsonText = jsonText.replace(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/g, "");
			jsonText = jsonText.replace(/\/\/.*\n/gm, "\n");
			console.log(jsonText);
			searchParam = JSON.parse(jsonText);
		} catch (e) {
			console.error(e);
		}

		let titleText = "";
		try {
			titleText = $(widget).children(".widgetTitle").text();
		} catch (e) {
			console.error(e);
		}
		let widgetObj = {
			dataType: $(widget).attr("data-type")
			, searchParam: searchParam
			, titleText: titleText
			, title: titleFlag
			, size: {
				width: parseInt($(widget).css("width").replace("px", ""))
				, height: parseInt($(widget).css("height").replace("px", ""))
			}
			, position: {
				top: parseInt($(widget).css("top").replace("px", ""))
				, left: parseInt($(widget).css("left").replace("px", ""))
			}
			, class: $(widget).attr("data-class")
		}
		widgets.push(widgetObj);
	});
	return {
		overBgFlag: overBgFlag
		, mainNo: mainNo
		, backgroundHeight: backgroundHeight
		, widgets: widgets
	};
}

const preset = {
	empty: {
		template: {
			overBgFlag: false
			, mainNo: -1
			, backgroundHeight: 600
			, widgets: []
		}
		, thumbnail: "layout-dl.png"
		, title: "비어있는 템플릿"
		, description: [
			"비어있는 템플릿 입니다."
			, "처음부터 화면을 구성하고자 할 때 사용할 수 있습니다."
		]
	}
	, preset01: {
		template: {
			"overBgFlag": true,
			"mainNo": -1,
			"backgroundHeight": 1260,
			"widgets": [
				{
					"dataType": "renew_equip_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "pie",
						"legend": "bottom"
					},
					"titleText": "신재생 자원 설비 현황",
					"title": true,
					"size": {
						"width": 440,
						"height": 360
					},
					"position": {
						"top": 0,
						"left": 0
					},
					"class": "scep-style-col-background-color-paleBlue scep-style-col-border-round scep-style-title-color-black"
				},
				{
					"dataType": "energy_save_rate",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"roundingDigits": 2
					},
					"titleText": "에너지 자립률",
					"title": true,
					"size": {
						"width": 440,
						"height": 360
					},
					"position": {
						"top": 0,
						"left": 480
					},
					"class": "scep-style-title-color-black scep-style-col-border-round scep-style-col-background-color-paleGreen"
				},
				{
					"dataType": "event_notification",
					"searchParam": {
						"notification": [
							"event",
							"alarm"
						],
						"showAtOnce": 3
					},
					"titleText": "Notification",
					"title": true,
					"size": {
						"width": 460,
						"height": 360
					},
					"position": {
						"top": 0,
						"left": 940
					},
					"class": "scep-style-title-color-black scep-style-col-background-color-paleYellow scep-style-col-border-round"
				},
				{
					"dataType": "empty_widget",
					"searchParam": {},
					"titleText": "",
					"title": false,
					"size": {
						"width": 760,
						"height": 360
					},
					"position": {
						"top": 560,
						"left": 640
					},
					"class": "scep-style-title-color-black scep-style-col-border-color-soft"
				},
				{
					"dataType": "board_notice",
					"searchParam": {
						"listType": "large",
						"entryClick": true
					},
					"titleText": "공지사항",
					"title": true,
					"size": {
						"width": 380,
						"height": 360
					},
					"position": {
						"top": 560,
						"left": 640
					},
					"class": "scep-style-col-border-round scep-style-title-color-black"
				},
				{
					"dataType": "board_other",
					"searchParam": {
						"boardType": "0003",
						"menuId": "M090300",
						"listType": "small",
						"entryClick": true
					},
					"titleText": "Q & A 게시판",
					"title": true,
					"size": {
						"width": 380,
						"height": 360
					},
					"position": {
						"top": 560,
						"left": 1020
					},
					"class": "scep-style-title-color-black scep-style-col-border-round"
				},
				{
					"dataType": "mapPowerLoad",
					"searchParam": {
						"searchParam": {
							"searchDate": "2020-12-29"
						},
						"colorList": [
							{
								"color": "#BD00B6",
								"range": 50,
								"rangeCheck": "less"
							},
							{
								"color": "#00A5FF",
								"range": 100,
								"rangeCheck": "less"
							},
							{
								"color": "#68D168",
								"range": 150,
								"rangeCheck": "less"
							},
							{
								"color": "#FFD700",
								"range": 200,
								"rangeCheck": "less"
							},
							{
								"color": "#FF7493",
								"range": 200,
								"rangeCheck": "greaterThan"
							}
						],
						"legend": "Y"
					},
					"titleText": "전력 사용량 지도",
					"title": true,
					"size": {
						"width": 620,
						"height": 540
					},
					"position": {
						"top": 380,
						"left": 0
					},
					"class": "scep-style-title-color-black scep-style-col-border-shape scep-style-col-border-style-blur scep-style-col-background-color-paleGreen"
				},
				{
					"dataType": "power_load_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "line",
						"chartDot": false
					},
					"titleText": "전기사용량 모니터링",
					"title": true,
					"size": {
						"width": 1400,
						"height": 300
					},
					"position": {
						"top": 940,
						"left": 0
					},
					"class": "scep-style-title-color-black scep-style-col-border-style-shadow scep-style-col-border-shape scep-style-col-background-color-palePurple"
				},
				{
					"dataType": "weather_info",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02"
						},
						"present": [
							"temperatures"
						]
					},
					"titleText": "날씨 정보",
					"title": true,
					"size": {
						"width": 760,
						"height": 180
					},
					"position": {
						"top": 380,
						"left": 640
					},
					"class": "scep-style-col-border-card scep-style-col-background-color-paleBlue scep-style-title-color-black"
				}
			]
		}
		, thumbnail: "layout-1.png"
		, title: "미리 정의된 템플릿 01"
		, description: [
			"미리 정의되어 있는 템플릿 1번째 입니다."
			, "기본적인 레이아웃을 수정하여 화면을 구성하고자 할 때 사용할 수 있습니다."
		]
	}
	, preset02: {
		template: {
			"overBgFlag": false,
			"mainNo": -1,
			"backgroundHeight": 1020,
			"widgets": [
				{
					"dataType": "empty_widget",
					"searchParam": {},
					"titleText": "",
					"title": false,
					"size": {
						"width": 660,
						"height": 300
					},
					"position": {
						"top": 0,
						"left": 740
					},
					"class": "scep-style-title-color-black scep-style-col-border-color-dark scep-style-col-border-style-shadow scep-style-col-background-color-natural"
				},
				{
					"dataType": "empty_widget",
					"searchParam": {},
					"titleText": "",
					"title": false,
					"size": {
						"width": 660,
						"height": 300
					},
					"position": {
						"top": 320,
						"left": 740
					},
					"class": "scep-style-title-color-black scep-style-col-background-color-natural scep-style-col-border-color-dark"
				},
				{
					"dataType": "board_notice",
					"searchParam": {
						"listType": "large",
						"entryClick": true
					},
					"titleText": "공지사항",
					"title": true,
					"size": {
						"width": 380,
						"height": 360
					},
					"position": {
						"top": 640,
						"left": 0
					},
					"class": "scep-style-col-background-color-paleBlue scep-style-col-border-round scep-style-col-border-style-shadow scep-style-title-color-black"
				},
				{
					"dataType": "power_load_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "line",
						"chartDot": false
					},
					"titleText": "전기사용량 모니터링",
					"title": true,
					"size": {
						"width": 600,
						"height": 360
					},
					"position": {
						"top": 640,
						"left": 800
					},
					"class": "scep-style-title-color-black scep-style-col-background-color-paleGreen scep-style-col-border-style-shadow scep-style-col-border-shape"
				},
				{
					"dataType": "energy_save_rate",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"roundingDigits": 2
					},
					"titleText": "에너지 자립률",
					"title": true,
					"size": {
						"width": 320,
						"height": 300
					},
					"position": {
						"top": 0,
						"left": 740
					},
					"class": "scep-style-title-color-black"
				},
				{
					"dataType": "weather_info",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02"
						},
						"present": [
							"temperatures"
						]
					},
					"titleText": "날씨 정보",
					"title": true,
					"size": {
						"width": 320,
						"height": 300
					},
					"position": {
						"top": 0,
						"left": 1080
					},
					"class": "scep-style-title-color-black"
				},
				{
					"dataType": "event_notification",
					"searchParam": {
						"notification": [
							"event",
							"alarm"
						],
						"showAtOnce": 3
					},
					"titleText": "Notification",
					"title": true,
					"size": {
						"width": 320,
						"height": 300
					},
					"position": {
						"top": 320,
						"left": 740
					},
					"class": "scep-style-title-color-black"
				},
				{
					"dataType": "renew_equip_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "pie",
						"legend": "bottom"
					},
					"titleText": "신재생 자원 설비 현황",
					"title": true,
					"size": {
						"width": 320,
						"height": 300
					},
					"position": {
						"top": 320,
						"left": 1080
					},
					"class": "scep-style-title-color-black"
				},
				{
					"dataType": "board_other",
					"searchParam": {
						"boardType": "0003",
						"menuId": "M090300",
						"listType": "small",
						"entryClick": true
					},
					"titleText": "Q & A 게시판",
					"title": true,
					"size": {
						"width": 380,
						"height": 360
					},
					"position": {
						"top": 640,
						"left": 400
					},
					"class": "scep-style-title-color-black scep-style-col-border-round scep-style-col-background-color-paleYellow scep-style-col-border-style-shadow"
				},
				{
					"dataType": "mapPowerLoad",
					"searchParam": {
						"searchParam": {
							"searchDate": "2020-12-29"
						},
						"colorList": [
							{
								"color": "#6ac2fc",
								"range": 50,
								"rangeCheck": "less"
							},
							{
								"color": "#79dd7e",
								"range": 100,
								"rangeCheck": "less"
							},
							{
								"color": "#ffcd56",
								"range": 150,
								"rangeCheck": "less"
							},
							{
								"color": "#ff9f40",
								"range": 200,
								"rangeCheck": "less"
							},
							{
								"color": "#ff2251",
								"range": 200,
								"rangeCheck": "greaterThan"
							}
						],
						"legend": "Y"
					},
					"titleText": "전력 사용량 지도",
					"title": true,
					"size": {
						"width": 720,
						"height": 620
					},
					"position": {
						"top": 0,
						"left": 0
					},
					"class": "scep-style-title-color-black scep-style-col-border-color-dark scep-style-col-border-shape scep-style-col-border-style-shadow scep-style-col-background-color-paleLime"
				}
			]
		}
		, thumbnail: "layout-2.png"
		, title: "미리 정의된 템플릿 02"
		, description: [
			"미리 정의되어 있는 템플릿 2번째 입니다."
			, "기본적인 레이아웃을 수정하여 화면을 구성하고자 할 때 사용할 수 있습니다."
		]
	}
	, preset03: {
		template: {
			"overBgFlag": true,
			"mainNo": -1,
			"backgroundHeight": 1140,
			"widgets": [
				{
					"dataType": "mapPowerLoad",
					"searchParam": {
						"searchParam": {
							"searchDate": "2020-12-29"
						},
						"colorList": [
							{
								"color": "#ff2251",
								"range": 50,
								"rangeCheck": "less"
							},
							{
								"color": "#32CD32",
								"range": 100,
								"rangeCheck": "less"
							},
							{
								"color": "#FFD700",
								"range": 150,
								"rangeCheck": "less"
							},
							{
								"color": "#FF8C00",
								"range": 200,
								"rangeCheck": "less"
							},
							{
								"color": "#ff2251",
								"range": 200,
								"rangeCheck": "greaterThan"
							}
						]
					},
					"titleText": "전력 사용량 지도",
					"title": true,
					"size": {
						"width": 360,
						"height": 300
					},
					"position": {
						"top": 40,
						"left": 520
					},
					"class": "scep-style-col-border-color-soft scep-style-title-color-black scep-style-col-background-color-lightGray scep-style-col-border-card"
				},
				{
					"dataType": "energy_save_rate",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"roundingDigits": 2
					},
					"titleText": "에너지 자립률",
					"title": true,
					"size": {
						"width": 500,
						"height": 300
					},
					"position": {
						"top": 40,
						"left": 0
					},
					"class": "scep-style-col-border-style-shadow scep-style-title-color-black scep-style-col-border-card scep-style-col-background-color-paleGreen"
				},
				{
					"dataType": "renew_equip_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "pie",
						"legend": "bottom"
					},
					"titleText": "신재생 자원 설비 현황",
					"title": true,
					"size": {
						"width": 500,
						"height": 300
					},
					"position": {
						"top": 40,
						"left": 900
					},
					"class": "scep-style-col-border-color-gray scep-style-col-border-style-shadow scep-style-col-border-card scep-style-title-color-black scep-style-col-background-color-paleLime"
				},
				{
					"dataType": "empty_widget",
					"searchParam": {},
					"titleText": "",
					"title": false,
					"size": {
						"width": 1400,
						"height": 420
					},
					"position": {
						"top": 360,
						"left": 0
					},
					"class": "scep-style-title-color-black scep-style-col-border-round scep-style-col-border-style-shadow scep-style-col-border-color-dark scep-style-col-background-color-natural"
				},
				{
					"dataType": "board_notice",
					"searchParam": {
						"listType": "large",
						"hasMore": true,
						"entryClick": true
					},
					"titleText": "공지사항",
					"title": true,
					"size": {
						"width": 440,
						"height": 380
					},
					"position": {
						"top": 380,
						"left": 20
					},
					"class": "scep-style-col-border-round scep-style-title-color-black scep-style-col-background-color-paleGreen"
				},
				{
					"dataType": "board_other",
					"searchParam": {
						"boardType": "0003",
						"menuId": "M090300",
						"listType": "small",
						"hasMore": true,
						"entryClick": true
					},
					"titleText": "Q & A 게시판",
					"title": true,
					"size": {
						"width": 440,
						"height": 380
					},
					"position": {
						"top": 380,
						"left": 480
					},
					"class": "scep-style-title-color-white scep-style-col-background-color-special scep-style-col-border-round"
				},
				{
					"dataType": "power_load_status",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02",
							"scope": "building"
						},
						"chartType": "line",
						"chartDot": false
					},
					"titleText": "전기사용량 모니터링",
					"title": true,
					"size": {
						"width": 940,
						"height": 320
					},
					"position": {
						"top": 800,
						"left": 460
					},
					"class": "scep-style-col-background-color-special scep-style-col-border-shape scep-style-col-border-style-blur scep-style-title-color-white"
				},
				{
					"dataType": "event_notification",
					"searchParam": {
						"notification": [
							"event",
							"alarm"
						],
						"showAtOnce": 3
					},
					"titleText": "Notification",
					"title": true,
					"size": {
						"width": 460,
						"height": 160
					},
					"position": {
						"top": 960,
						"left": 0
					},
					"class": "scep-style-title-color-black scep-style-col-background-color-paleBlue scep-style-col-border-shape scep-style-col-border-style-blur"
				},
				{
					"dataType": "weather_info",
					"searchParam": {
						"searchParam": {
							"yyyy": "2020",
							"mm": "09",
							"dd": "02"
						},
						"present": [
							"temperatures"
						]
					},
					"titleText": "날씨 정보",
					"title": true,
					"size": {
						"width": 460,
						"height": 160
					},
					"position": {
						"top": 800,
						"left": 0
					},
					"class": "scep-style-col-background-color-paleLime scep-style-title-color-black scep-style-col-border-style-blur scep-style-col-border-shape"
				},
				{
					"dataType": "board_other",
					"searchParam": {
						"boardType": "0003",
						"menuId": "M090300",
						"listType": "medium",
						"entryClick": true
					},
					"titleText": "OOO 게시판",
					"title": true,
					"size": {
						"width": 440,
						"height": 380
					},
					"position": {
						"top": 380,
						"left": 940
					},
					"class": "scep-style-title-color-black scep-style-col-border-round scep-style-col-background-color-natural scep-style-col-border-color-soft"
				}
			]
		}
		, thumbnail: "layout-3.png"
		, title: "미리 정의된 템플릿 03"
		, description: [
			"미리 정의되어 있는 템플릿 3번째 입니다."
			, "기본적인 레이아웃을 수정하여 화면을 구성하고자 할 때 사용할 수 있습니다."
		]
	}
}

/**
 * @description
 * 새 템플릿을 생성하여 적용하는 함수
 */
function newTemplate(selectObejct) {
	let type = $(selectObejct).attr("data-preset");
	if (type != null && typeof type != "undefined" && type != "") {
		currentScreenData = preset[type].template;
		setScreenFromData();
		checkOverlapWidget();

		$("#saveComment").val("");
		$("#overrideBtn").addClass("disable");

		closeTemplate();
	} else {
		alert("템플릿을 선택 하세요.");
	}
}
/**
 * @description
 * 템플릿을 불러와서 적용하는 함수
 */
function loadTemplate(mainNo) {
	$.ajax({
		url: CTX + "/manage/getScreenDataAjax?mainNo=" + mainNo
		, method: "GET"
		, dataType: "json"
		, success: function (result) {
			if (result.status == true) {
				let resultData = result.data.screen_data;
				let decodedData = Base64.decode(resultData);
				currentScreenData = JSON.parse(decodedData);
				setScreenFromData();
				checkOverlapWidget();

				$("#saveComment").val(result.data.screen_comment);
				$("#overrideBtn").removeClass("disable");
			} else {
				alert(result.message);
			}
		}
		, error: function (xhr, stat, err) {
			console.log(xhr);
			console.log(stat);
			console.log(err);
		}
	});
}

/**
 * @description
 * 데이터로 화면을 구성하는 함수
 */
function setScreenFromData() {
	let mainNo = currentScreenData.mainNo;
	if (currentScreenData.overBgFlag) {
		$("#changeOverBgBtn").attr("data-sw", "ON");
		$("#changeOverBgBtn").addClass("over-bg-sw");
		$(".main").addClass("over-bg");
	} else {
		$("#changeOverBgBtn").attr("data-sw", "OFF");
		$("#changeOverBgBtn").removeClass("over-bg-sw");
		$(".main").removeClass("over-bg");
	}
	$("#contentsArea").html("");
	$("#contentsArea").attr("data-main-no", mainNo);
	$("#contentsArea").css("height", currentScreenData.backgroundHeight + "px");
	let widgets = currentScreenData.widgets;
	for (var i = 0; i < widgets.length; i++) {
		appendWidget("draw", widgets[i]);
	}
	changeEditMode();
	changeEditMode();
}




















// 컨텐츠 추가 시작
function initPreview() {
	$(".sampleWidget").removeClass("selected");
	$(".sampleWidget").attr("data-selected", "N");
	$("#appendWidgetDataType").val("");
	$("#appendWidgetClass").val("");
	$("#appendWidgetSearchParam").val("");
	$("#appendWidgetTitle").prop("checked", true);
	$(".previewAppenderClass[data-base='Y']").prop("checked", true).trigger("change");
	$(".previewAppenderTitle[data-base='Y']").prop("checked", true).trigger("change");
	$("#widgetSamplePriviewTitleText").text("__________");
	$("#widgetSamplePriviewContent").html("");
}
// 컨텐츠 추가 끝













// 불러오기 시작
function loadSearch() {
	var searchParamObj = null;
	var colNameObj = [];
	var colModelObj = [];
	searchParamObj = {
		searchScreenComment: $("#searchScreenComment").val()
		, searchDtStart: $("#searchDtStart").val()
		, searchDtend: $("#searchDtend").val()
	}
	colNameObj = ["No", "제목", "메인적용", "현재불러옴", "데이터", "등록자ID", "등록자이름", "등록일시"];
	colModelObj = [
		{ name: "main_no", width: 1, align: "right" }
		, { name: "screen_comment", width: 12, align: "left" }
		, {
			name: "main_active", width: 2, align: "center", formatter: function (cellValue, rowOption, rowObject) {
				if (cellValue == "Y") {
					return "O";
				} else {
					return "";
				}
			}
		}
		, {
			name: "now", width: 2, align: "center", formatter: function (cellValue, rowOption, rowObject) {
				if (rowObject.main_no == $("#contentsArea").attr("data-main-no")) {
					return "O";
				} else {
					return "";
				}
			}
		}
		, { name: "screen_data", width: 1, align: "left", hidden: true }
		, { name: "input_id", width: 3, align: "left", hidden: true }
		, { name: "user_name", width: 3, align: "left", hidden: true }
		, { name: "input_date", width: 3, align: "center" }
	]
	$("#loadTemplateGrid").jqGrid("GridUnload");
	$("#loadTemplateGrid").jqGrid({
		url: CTX + "/manage/getScreenDataListAjax?searchScreenComment=" + $("#searchScreenComment").val() + "&searchDtStart=" + $("#searchDtStart").val() + "&searchDtend=" + $("#searchDtend").val()
		, mtype: "GET"
		, ajaxGridOptions: { contentType: "application/json" }
		, jsonReader: {
			root: "data"
			, records: "jqGridTotalCnt"
			, total: "jqGridTotalPage"
			, page: "jqGridCurrentPage"
			, repeatitems: false
		}
		, page: 1
		, datatype: "json"
		, height: "100%"
		, autowidth: true
		, cmTemplate: { sortable: false, align: "right" }
		, colNames: colNameObj
		, colModel: colModelObj
		, viewsortcols: "[false, 'vertical', false]"
		, rownumbers: false
		, rowNum: 7
		, rowList: [7]
		, viewrecords: true
		, pager: "#loadTemplateGridPager"
		, sortable: "false"
		, loadComplete: function () {
			$("#loadTemplateGrid").jqGrid("setGridWidth", 1100);
		}
		, onSelectRow: function (rowId, status, evt, a, b, c) {
			jqGridWorId = rowId;
		}
	});
}
let jqGridWorId = 0;
function selectTemplate() {
	let data = $("#loadTemplateGrid").getRowData(jqGridWorId);
	let decodeData = Base64.decode(data.screen_data)
	currentScreenData = JSON.parse(decodeData);
	setScreenFromData();
	checkOverlapWidget();
	closeLoadBefore();
	$("#saveComment").val(data.screen_comment);
	$("#overrideBtn").addClass("disable");
}
function resetParam() {
	$("#searchScreenComment").val("");
	$("#searchDtStart").val("");
	$("#searchDtend").val("");
	loadSearch();
}
// 불러오기 끝














// 저장 시작
function saveFunc(saveType, dom) {
	if ($(dom).attr("class").indexOf("disable") < 0) {
		let saveConfirm = confirm("서버에 저장하시겠습니까?");
		if (saveConfirm) {
			let saveFlag = false;
			if (saveType == "make") {
				saveFlag = true;
			} else if (saveType == "override") {
				saveFlag = true;
			}
			if (saveFlag) {
				let activeYn = $(".saveActive:checked").val();
				let activeFlag = false;
				if (activeYn == "Y") activeFlag = true;
				let comment = $("#saveComment").val();
				if (comment.trim() == "") {
					comment = "제목 없음"
				}
				editFinish(saveType, activeFlag, comment);
			}
		}
	}
}
// 저장 끝






























































































function getUUID() {
	return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
}
function initContentsDraw(widget){
	let uuid = getUUID();
	let result = $("<div />");
	result.attr("id", "widget-" + uuid);
	result.css("width", "100%");
	result.css("height", "100%");
	result.css("display", "flex");
	result.css("justify-content", "center");
	result.css("align-items", "center");
	result.css("flex-direction", "column");
	setWidgetData(result, widget);
	return {
		dom: result
		, id: "widget-" + uuid
	};
}


// 컨텐츠 핸들링
/**
 * 비어있는 컨텐츠를 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawEmptyWidget(param, widget) {
	let initObject = initContentsDraw(widget);
}
/**
 * 부하현황 라인계열 차트 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawLoadStatus(param, widget) {
	function drawChart(data, domId) {
		var container = document.getElementById(domId);

		var xAxisEntryName = "";

		xAxisEntryName = "시간";

		var categoryList = [];
		var seriesObject = {};
		if (data.category) categoryList = data.category;
		if (data.series) seriesObject = data.series;

		var chartData = {
			categories: categoryList
			, series: seriesObject
		}

		var options = {
			chart: {
				width: 1300
				, height: 300
				, title: "에너지 사용량(kWh)"
				, format: "1,000.00"
			}
			, yAxis: {
				title: "사용량"
			}
			, xAxis: {
				title: xAxisEntryName
				, pointOnColumn: true
				, tickInterval: 'auto'
			}
			, series: {
				showDot: param.chartDot
				, zoomable: true
				, pointWidth: 2
			}
			, tooltip: {
				grouped: false
			}
			, legend: {
				visible: false
			}
			, theme: 'theme'
			, chartExportMenu: {
				visible: false
			}
		};
		var theme = {
			chart: {
				background: {
					opacity: 0
				}
			},
		};
		tui.chart.registerTheme('theme', theme);
		var chart = tui.chart.lineChart(container, chartData, options);

		chart.resize({ width: $("#" + domId).width(), height: $("#" + domId).height() });

		$(window).on("resize", function () {
			chart.resize({ width: $("#" + domId).width(), height: $("#" + domId).height() });
		});
		$(".menu").click(function () {
			setTimeout(function () {
				chart.resize({ width: $("#" + domId).width(), height: $("#" + domId).height() });
			}, 300);
		});

	}
	function getChartData(domId, param) {
		$("#" + domId).html("");
		var searchParamObj = {
			yyyy: param.searchParam.yyyy
			, mm: param.searchParam.mm
			, dd: param.searchParam.dd
			, chartType: true
			, searchScope: param.searchParam.scope
			, searchDiv: "1"
		};
		$.ajax({
			url: CTX + "/energyMonitoring/powerMonitoringListAjax"
			, method: "POST"
			, data: JSON.stringify(searchParamObj)
			, dataType: "json"
			, success: function (result) {
				if (result.status == true) {
					drawChart(result.data, domId);
				} else {
					alert(result.message);
				}
			}
			, error: function (xhr, stat, err) {
				console.log(xhr);
				console.log(stat);
				console.log(err);
			}
		});
	}

	let initObject = initContentsDraw(widget);
	
	getChartData(initObject.id, param);

}
/**
 * 신재생 설비 현황 파이계열 차트 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawRenewEquipStatus(param, widget) {
	function drawEquipVolumeChart(domId) {
		var container = document.getElementById(domId);
		var data = {
			categories: ['Browser'],
			series: [
				{
					name: '태양광',
					data: 94189 + 4008
				},
				{
					name: '태양열',
					data: 1151
				},
				{
					name: 'ESS',
					data: 12963
				}
			]
		};
		var options = {
			chart: {
				width: 500,
				height: 300
			}
			, tooltip: {
				suffix: 'kW'
			}
			, theme: 'theme'
			, chartExportMenu: {
				visible: false
			}
		};
		if(typeof param.legend != "undefined"){
			switch(param.legend){
			case "top":
			case "bottom":
			case "left":
			case "right":
				options.legend = {
					align: param.legend
				}
				break;
			case "none":
				options.legend = {
					visible: false
				}
				break;
			}
		}else{
			options.legend = {
				visible: false
			}
		}
		var theme = {
			chart: {
				background: {
					opacity: 0
				}
			},
		};
		tui.chart.registerTheme('theme', theme);
		var chart = tui.chart.pieChart(container, data, options);

		chart.resize({ width: $("#" + domId).width(), height: $("#" + domId).height() });

		$(window).on("resize", function () {
			chart.resize({ width: $("#" + domId).width(), height: $("#" + domId).height() });
		});
	}

	let initObject = initContentsDraw(widget);

	drawEquipVolumeChart(initObject.id);

}
/**
 * 지도 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawMap(param, widget) {
	function drawBase(parentDomId, targetDomId, data, fillColor, parentWidth, parentHeight, legend) {


		let animateInterval = null;
		if(animateInterval != null){
			clearInterval(animateInterval);
		}

		
		$("#" + parentDomId).css("display", "block");
		
		let targetDomObject = $("<div />");
		targetDomObject.attr("id", targetDomId);
		targetDomObject.css("width", parentWidth);
		targetDomObject.css("height", parentHeight);
		targetDomObject.css("display", "block");
		targetDomObject.css("float", "left");
		targetDomObject.css("position", "relative");
		$("#" + parentDomId).append(targetDomObject);

		//$("#" + targetDomId).css("width", width + "px");
		//$("#" + targetDomId).css("height", height + "px");
		
		//$("#" + targetDomId).css("width", $("#" + parentDomId).width() + "px");
		//$("#" + targetDomId).css("height", $("#" + parentDomId).height() + "px");

		//let width = 1335;
		//let height = 1030;
		// let width = 470;
		// let height = 365;

		let paper = Raphael(targetDomId, parentWidth, parentHeight);
		$(paper.canvas).attr("id", targetDomId + "-base");

		let tooltipDom = $("<div />");
		tooltipDom.attr("id", targetDomId + "-tooltip");
		tooltipDom.addClass("display"); // asdf
		tooltipDom.css("display", "none");
		tooltipDom.css("position", "absolute");
		tooltipDom.css("background", "white");
		tooltipDom.css("border", "2px solid gray");
		tooltipDom.css("border-radius", "15px");
		tooltipDom.css("padding", "10px");
		tooltipDom.css("pointer-events", "none");
		tooltipDom.css("z-index", 10);
		$("#" + targetDomId).append(tooltipDom);

		let legnedDom = $("<div />");
		legnedDom.css("position", "absolute");
		legnedDom.css("pointer-events", "none");
		legnedDom.css("text-align", "center");
		legnedDom.css("bottom", "-5px");
		legnedDom.css("right", "5px");
		// legnedDom.css("width", "100%");
		
		if(typeof legend != "undefined" && legend != null && legend == "Y"){
			for(var i=0 ; i<fillColor.length ; i++){
				let legendEntry = $("<span/>");
				legendEntry.css("display", "inline-block");
				legendEntry.css("margin", "5px 15px 5px 0");
				legendEntry.css("font-size", "14px");
				legendEntry.css("color", "#727272");
				legendEntry.css("font-weight", "400");
				let sep = "";
				switch(fillColor[i].rangeCheck){
				case "less":
					sep = "미만";
					break;
				case "lessThan":
					sep = "이하";
					break;
				case "greater":
					sep = "초과";
					break;
				case "greaterThan":
					sep = "이상";
					break;
				}
				legendEntry.html(`<span style="width:16px; border-radius:36px; height: 16px; display: inline-block; font-size: 12px; vertical-align: middle; background: ` + fillColor[i].color + `;">&nbsp;</span> ` + fillColor[i].range + data.unit + " " + sep);
				legnedDom.append(legendEntry);
			}
			$("#" + targetDomId).append(legnedDom);
			//console.log(legnedDom.css("width"));
			//legnedDom.css("margin-left", "200px");
			//legnedDom.css("margin-left", (parentWidth - legnedDom.width() - 20) + "px");
		}

		let mapBound = paper.path(`M8.3,172.4c0,0,16.4-29.9,60.1-72.7c0,0,30.8-28.3,121.4-88.2l11.9,9h16.4l5.5,6.9c0,0,19.7,0.7,28.3-2.6  l11.9,4l6.4-4c0,0,18.3,10.5,29.7,6.7l19.5-11.9l13.5,11.2l2.6,0.5l-12.1,42.1l-0.7,12.6l-4.3,15.9l-0.7,27.3l3.1,5.9  c0,0,16.2,2.4,14.7,17.8l0.1,8.2l18.7-0.8c0,0-0.2,16.6,7.6,24.7l19.2,25.2l25.4,15c0,0,10.9-3.1,25.2-2.9l7.8,15.4  c0,0-6.2,3.8-14.5,17.6l13.9,34.6l3.2,7.2l16.4,25.7c0,0,2.6-0.7,16.2,15.2c0,0,3.3,4.3-2.6,5.5l-18.1,2.9c0,0-19.3,1.3-33.9,0.8  c-5.8-0.2-10.3-0.4-12.2-1.7c0,0-37.5,6.4-49.4,7.7c-8,0.9-32.6,1.2-32.6,1.2s-17.6,2.6-33.7,3.1c0,0-5.2,11.6-20.9,6.7  c0,0,1,10.7-22.1-1.7l-44.2,0.7c0,0-7.8,16.2-29.2,6.4c0,0-7.8,7.4-30.4,0.2l-1.2-3.3l-23-7.6c0,0-8.3,5.9-13.8,0  c0,0-9.3,1.2-6.4-9.3c0,0-0.5-8.1,3.1-8.3c0,0-6.7-1.4-5.5-10.9l-12.8-21.9l-3.3-11.2c0,0-2.9-4.8-1.7-7.8l-12.1-23.8l-1.4-10.7  c0,0-11.6-23.5-20.7-28.5l-0.4-4.5l-3.9-4.3l-3.8-16.4c0,0,2.1-7.8-10.2-16.2L8.3,172.4z`)
			.attr({
				"fill": "white"
				, "stroke": "gray"
				, "stroke-width": 3
			});
		// let mapBound = paper.path(`M170.3,441.5c-6.6,0-14.8-1.2-17.5-6.5l-23.1-7.1c-1.5,1.7-3.9,3.5-7.3,3.5c-2.7,0-5.6-1.2-8.6-3.5
		// 			c-1.1-0.3-3.3-1.2-4.6-3.4c-1.3-2.1-1.5-4.7-0.5-7.7l2.1-7.8l-4.3-4.3l-1.7-6.5l-15.7-30.2l0.3-1c0.3-1,0.7-3.5-2.3-4.5l-1.5-0.5
		// 			l-0.2-1.5c0-0.1-1.4-9.4-9.6-24.4l-0.3-0.5l0-0.5c-1.1-11.9-4.4-21.7-6.3-21.8l-1.4-0.1l-0.7-1.2c-0.1-0.2-8.8-15.3-15-20.1
		// 			l-0.7-0.5l-0.2-0.8c-0.7-2.6-2.7-6.6-4.4-6.9l-2.1-0.3l0-2.2c0-0.3,0.1-25.2-13.4-33.7l-23-10.8l1.6-2.4
		// 			c2.2-3.2,53.3-79.3,78.9-92.2l105.7-81l11.1,10.1l16.7-0.2l5.5,6.4l16.9,0.3l13.4-2.4l0.8,0.4c0.1,0,5.4,2.9,10.1,2.9
		// 			c2.2,0,3.7-0.6,4.7-1.9l1-1.3l29.5,7.5l24.3-14.1l17.9,13.8l-2.2,1.8c-0.5,0.8-4.1,7.2-9.6,39.7c-1.8,10.5-3.2,18.2-4.3,22.9
		// 			c-0.7,2.9-1.2,4.9-2.1,6.1l-0.3,29.5l4.5,6.8c3.2,0.7,12.1,3.3,14.1,10.9l0.1,0.3v16.1l9.6-1c1.2-0.5,4.3-1.9,6.8-1.9
		// 			c2.3,0,3.5,1,4.1,1.9c1.3,1.8,0.7,4.2,0.3,5.4l0.4,8.6l4.9,8.9l19.5,23.6l3,4.4l25.9,15.2l18.9-4.6h0.3c3.4,0,9.3,1.3,10.9,6.2
		// 			l3.9,5.9l0.1,0.5c0.1,0.2,1.2,5.9-5.1,11.5l-8.7,11.5c-0.1,1.1,0.1,4.1,2.6,7.9l0.1,0.2l0.1,0.2c0.1,0.3,13,31,17.1,38
		// 			c10.7,14.1,27.6,35.9,30.8,38.5c0.9,0.6,1.6,1.9,1.2,3.3c-0.5,2.3-3,5-24.9,7.9l-0.2,0h-47.7l-0.1,0c0,0-2.5-0.1-4.6-0.1
		// 			c-1.6,0-2.1,0.1-2.1,0.1c-1.2,0.2-29.6,6.6-44.5,9.9l-0.3,0.1l-0.3,0c0,0-4.5-0.2-11.6-0.2c-11.9,0-30,0.6-48.8,3.5
		// 			c-1.8,2.7-7.4,8.6-21.3,9.2l-1.3,0c-0.9,1.9-2.8,4.5-6,4.5c-1.8,0-3.6-0.8-5.4-2.6c-0.4,0.1-0.9,0.1-1.5,0.1
		// 			c-3.1,0-6.6-1.3-10.4-3.9l-44.5,0.9c-2.4,2.8-9.9,10.7-18.7,10.7c-3.9,0-7.5-1.5-10.7-4.5c-2.6,1.6-7.6,4.1-14.6,4.5c0,0,0,0,0,0
		// 			C173.7,441.4,172.3,441.5,170.3,441.5z`)
		// 	.attr({
		// 		"fill": "gray"
		// 		, "stroke": "none"
		// 	});

		function getColor(value) {

			let retColor = "black";
			let colorPickFlag = false;

			for (var i = 0; i < fillColor.length; i++) {
				let fillColorObj = fillColor[i];
				let range = fillColorObj.range;
				let rangeCheck = fillColorObj.rangeCheck;
				let color = fillColorObj.color;

				switch (rangeCheck) {
				case "less":
					if (value < range) {
						retColor = color;
						colorPickFlag = true;
					}
					break;
				case "lessThan":
					if (value <= range) {
						retColor = color;
						colorPickFlag = true;
					}
					break;
				case "greater":
					if (value > range) {
						retColor = color;
						colorPickFlag = true;
					}
					break;
				case "greaterThan":
					if (value >= range) {
						retColor = color;
						colorPickFlag = true;
					}
					break;
				case "equal":
					if (value == range) {
						retColor = color;
						colorPickFlag = true;
					}
					break;
				}
				if (colorPickFlag == true) {
					break;
				}
			}

			return retColor;
		}
		function getStrokeColor(value) {

			let retColor = "black";
			let colorPickFlag = false;

			for (var i = 0; i < fillColor.length; i++) {
				let fillColorObj = fillColor[i];
				let range = fillColorObj.range;
				let rangeCheck = fillColorObj.rangeCheck;
				let color = fillColorObj.color;


				let trimColorCode = color.replace(/ /gi, "").toLowerCase();

				let colorPatternSimpleHEX = /^[#]{1}[0-9a-f]{3}$/;
				let colorPatternHEX = /^[#]{1}[0-9a-f]{6}$/;
				let colorPatternHEXA = /^[#]{1}[0-9a-f]{8}$/;
				let colorPatternRGB = /(rgb\(((([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*){2}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\)))/;
				let colorPatternRGBA = /(rgba\(((([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*){3}(1|1.0*|0?.\d)\)))/;
				
				let colorType = "none";

				if(colorPatternSimpleHEX.test(trimColorCode)) colorType = "simpleHex";
				if(colorPatternHEX.test(trimColorCode)) colorType = "hex";
				if(colorPatternHEXA.test(trimColorCode)) colorType = "hexA";
				if(colorPatternRGB.test(trimColorCode)) colorType = "rgb";
				if(colorPatternRGBA.test(trimColorCode)) colorType = "rgbA";

				let red = 0;
				let green = 0;
				let blue = 0;
				let alpha = 1;
				switch(colorType){
				case "simpleHex":
					red = parseInt(trimColorCode.substr(1, 1), 16);
					green = parseInt(trimColorCode.substr(2, 1), 16);
					blue = parseInt(trimColorCode.substr(3, 1), 16);
					break;
				case "hexA":
					alpha = parseInt(trimColorCode.substr(7, 2), 16);
				case "hex":
					red = parseInt(trimColorCode.substr(1, 2), 16);
					green = parseInt(trimColorCode.substr(3, 2), 16);
					blue = parseInt(trimColorCode.substr(5, 2), 16);
					break;
				case "rgbA":
					alpha = parseInt(trimColorCode.split("(")[1].split(")").split(",")[3]);
				case "rgb":
					red = parseInt(trimColorCode.split("(")[1].split(")").split(",")[0]);
					green = parseInt(trimColorCode.split("(")[1].split(")").split(",")[1]);
					blue = parseInt(trimColorCode.split("(")[1].split(")").split(",")[2]);
					break;
				}

				let darkRatio = 0.6;

				red = (red * darkRatio).toFixed(0);
				green = (green * darkRatio).toFixed(0);
				blue = (blue * darkRatio).toFixed(0);

				let strokeColor = "rgba(" + red + "," + green + "," + blue + ")";

				switch (rangeCheck) {
				case "less":
					if (value < range) {
						retColor = strokeColor;
						colorPickFlag = true;
					}
					break;
				case "lessThan":
					if (value <= range) {
						retColor = strokeColor;
						colorPickFlag = true;
					}
					break;
				case "greater":
					if (value > range) {
						retColor = strokeColor;
						colorPickFlag = true;
					}
					break;
				case "greaterThan":
					if (value >= range) {
						retColor = strokeColor;
						colorPickFlag = true;
					}
					break;
				case "equal":
					if (value == range) {
						retColor = strokeColor;
						colorPickFlag = true;
					}
					break;
				}
				if (colorPickFlag == true) {
					break;
				}
			}

			return retColor;
		}

		let mapGroupList = [];
		let mapGroup1 = paper.path(`M290.4,214c-1.3-2.5-2.5-5.1-3.8-7.6c-4.7-9.8-9.7-19.5-14.7-29.2c-0.4-0.8-0.6-1.7-1.3-2.3  c-0.9-0.8-1.5-1.9-2.2-2.8c-0.5-0.7-0.8-1.4-0.6-2.2c0.1-0.5-0.2-0.9-0.4-1.4c-2.1-4-4.1-8-6.2-12c-0.7-1.3-1-2.8-2.4-3.6  c-0.7-0.5-1.5-0.5-2.3-0.6c-2.1-0.3-2.1-0.4-1.3-2.3c0.1-0.1,0.2-0.3,0.2-0.4c0.4-1.7,0.9-3.4-0.2-5.2c-1.9-3.2-3.5-6.5-5.1-9.8  c-1-2-2-3.9-4.5-4c-0.3,0-0.7-0.2-1-0.4c-0.6-0.2-1-0.1-1.6,0.1c-4.5,2.3-9,4.5-13.5,6.8c-2.4,1.3-5,2.2-7.3,3.6  c-3.3,2-6.5,3.9-10.2,5.1c-1.2,0.4-2.4,0.1-3.5,0.5c-1.1,0.3-2.3,0.1-3.5,0.1c-1.9-0.1-3.7-0.5-5.6-0.8c-2.9-0.4-5.8,0-8.4,1.5  c-1.5,0.8-3.3,1.3-4.6,2.7c-2.4,2.5-4.3,5.3-5.7,8.5c-1.8,4-5.1,6.4-8.6,8.5c-2,1.3-4.3,2.1-6.5,3.2c-6.2,3.1-12.4,6.3-18.5,9.7  c-3.8,2.1-7.7,4-11.7,5.8c-1.8,0.8-3.7,1.5-5.4,2.3c-3.5,1.7-7,3.4-10.4,5.1c-1.7,0.8-3.4,1.7-5,2.5c-1,0.5-1.6,2.1-1,2.8  c1.6,1.8,2.6,4.1,3.9,6.1c1.9,2.9,3.4,6.1,4.8,9.3c1,2.3,1.6,4.9,3.6,6.7c0.1,0.1,0.2,0.3,0.2,0.4c2.3,5.5,5,10.9,7.1,16.5  c1.5,3.9,3.4,7.6,5.2,11.4c1.9,4.2,3.9,8.4,5.8,12.6c2.2,4.8,4.5,9.7,6.7,14.5c1.4,3.1,3,6,3.9,9.3c0.5,2,1.2,3.9,3.1,5.1  c0.3,0.2,0.4,0.5,0.6,0.7c1.7,2.1,3.7,4,6.1,5.2c2.2,1.1,4.6,1.9,7.1,1.9c3.3,0,6.7,0.1,10,0.3c4.8,0.3,9.5,0.4,14.3,0.4  c2.8,0,5.7-0.2,8.5-0.3c2.3,0,2.3,0,1.5,2.2c-0.6,1.9-1.3,3.8-1.6,5.8c-0.3,1.9-0.2,3.9-0.3,5.9c-0.1,2.5-0.4,4.9-0.4,7.3  c0,1,0,2.1-0.2,3.1c-0.7,3.3-1.2,6.7-1.4,10c-0.2,2.5-0.4,5.1-0.6,7.6c-0.1,0.8,0.2,1.1,1,1c1.4-0.1,2.8-0.2,4.2-0.3  c4.8-0.4,9.6-0.7,14.5-1.1c2.9-0.2,5.9-0.3,8.8-0.5c4.8-0.3,9.7-0.6,14.5-0.9c0.5,0,0.9,0.1,1.3,0.4c1.9,1.4,3.9,1.4,5.8-0.1  c0.7-0.6,1.4-0.9,2.4-1c2.2-0.1,4.4-0.2,6.6-0.4c3.2-0.3,6.4-0.5,9.7-0.7c3.1-0.2,6.2-0.4,9.3-0.7c2.5-0.3,2.6-0.3,2.4-3  c0-1,0.2-1.7,1-2.2c0.7-0.5,1-1.1,1-2c0-2.6,0-5.1,0-7.7c0,0,0.1,0,0.1,0c0-2.6,0-5.2,0-7.8c0-0.3,0-0.7-0.1-0.9  c-0.5-1.5-1.1-3-1.7-4.4c-1.3-3.4-3.2-6.5-4.4-10c-0.3-1-1.2-0.5-2.3-0.4c-1,0.1-2,0.2-3,0.4c-2.9,0.4-5.9,0.9-8.8,1.2  c-3.5,0.4-7,0.7-10.5,0.8c-0.7,0-1.5-0.1-2.1,0.4c-1.3,1.2-2.8,1.1-4.4,1c-1,0-2-1.8-2.2-2.8c-0.3-1.2-0.5-2.4-0.8-3.6  c-0.2-0.7-0.1-1.3,0.4-1.8c0.5-0.5,0.7-1.2,0.6-2c-0.3-3.9-0.5-7.9-0.7-11.8c-0.4-6.1-0.5-12.1-1.1-18.2c-0.4-3.6-1.1-7.1-2.4-10.5  c-0.5-1.4-1.5-2.2-2.8-2.7c-0.7-0.2-1.3-0.6-1.8-1c-0.6-0.4-0.6-0.8-0.3-1.5c1.1-2.3,2.1-4.6,3.1-7c0.8-1.8,0.8-1.9,2.8-1.8  c0.5,0,0.9,0.2,1.3,0.5c0.6,0.5,1.4,0.6,2.1,0.3c0.5-0.2,1.1-0.4,1.6-0.7c5.9-2.8,11.9-5.5,17.9-8.2c3.1-1.4,6.3-2.4,9.3-3.8  c5.2-2.4,10.4-4.8,15.7-7.2C290.2,217.5,291,215.3,290.4,214z`)
			.attr({
				"fill": getColor(data.group1.usage)
				, "stroke": getStrokeColor(data.group1.usage)
				, "stroke-width": 1
			}).data("usage", data.group1.usage.toFixed(2))
			.data("title", data.group1.title)
			.data("unit", data.unit)
			.data("group", "group1");
		//mapGroup1.click(function(){
		//	alert(1);
		//});
		mapGroupList.push(mapGroup1);

		let mapGroup2 = paper.path(`M170.1,85c-0.3,4.8-0.1,9.2-0.2,13.5c0,1.4-0.1,2.8-0.1,4.2c0,0.6-0.2,0.8-0.8,1c-1.6,0.3-3.1,0.6-4.7,0.4  c-0.8-0.1-1.7,0-2.5,0c-4.7-0.1-9.3-0.1-14-0.2c-1.4,0-2.3,0.7-3.1,1.6c-0.4,0.5-0.3,1.3-0.3,1.9c-0.1,1.1,0,2.2,0,3.2  c0,2.4,0,4.7-0.2,7.1c-0.1,2.3-1.2,4.4-2.4,6.3c-1.2,1.8-2.5,3.5-4.1,5c-4.4,4.3-8.8,8.6-13.2,12.9c-0.6,0.5-0.8,1.1-0.9,1.8  c0,0.4,0.1,0.6,0.3,0.9c4.3,4.2,8.7,8.4,13,12.6c3,2.9,6.4,5.4,9.7,8c1.3,1,2,2.5,2.9,3.8c0.3,0.4-0.2,0.6-0.4,0.7  c-1.9,1.3-3.7,2.5-5.6,3.8c-4.3,3-9.1,5.3-13.7,7.9c-0.9,0.5-1.9,0.8-2.9,1.2c-2.3,1-4.4,2.3-6.6,3.4c-3.9,1.8-7.8,3.7-11.6,5.7  c-2.2,1.1-4.4,2.4-6.5,3.6c-1,0.6-1.8,1.6-2.7,2.4c-3.5,3.4-7.1,6.7-10.6,10.2c-0.5,0.5-0.9,0.5-1.5,0.1c-6.3-4.4-12.5-8.7-18.8-13  c-4.4-3.1-8.8-6.1-13.2-9.2c-5.1-3.5-10.2-7.2-15.5-10.6c-1.4-0.9-2.7-1.9-4.2-2.6c-0.5-0.2-0.7-0.2-1,0.2c-1.6,2.4-3.2,4.8-4.8,7.2  c-0.3,0.5-0.7,0.6-1.2,0.2c-4.9-3.1-9.8-6.2-14.7-9.3c-0.4-0.3-0.5-0.5-0.2-0.9c2.9-4.1,5.6-8.3,9.1-12c1.3-1.3,2.2-3,3.4-4.5  c2.9-3.8,6-7.5,9.1-11.2c3.4-4,6.9-7.9,10.4-11.8c2.1-2.3,4.2-4.7,6.2-7.1c1.5-1.7,3.2-3,5-4.4c1.7-1.4,3.3-2.7,4.3-4.7  c1.1-2.2,3-3.7,4.8-5.3c3.4-3.1,6.9-6.1,10.3-9.3c2.8-2.6,5.8-5,8.7-7.4c3.3-2.7,6.6-5.5,10-8.2c1.4-1.1,3-2.1,4.5-3.1  c4.2-2.8,8.3-5.8,12.4-8.7c4.6-3.2,9.2-6.4,13.7-9.7c4.4-3.1,8.7-6.3,13.1-9.4c0.8-0.6,1.8-0.6,2.8-0.9c0.5-0.2,0.9-0.4,1.2-0.7  c2.1-1.6,4.1-3.2,6.2-4.8c0.3-0.2,0.5-0.2,0.8,0.1c1.4,1.7,2.8,3.4,4,5.3c0.4,0.6,0.5,1.6,0.6,2.4c0.5,1.9,0.8,3.9,1.4,5.8  c0.6,1.9,1.5,3.7,2.3,5.5c0.1,0.3,0.4,0.5,0.6,0.7c2,2.1,4,4.2,6.3,6.1c0.3,0.2,0.5,0.4,0.6,0.7c1.3,2.2,2.7,4.3,3.5,6.7  C169.5,82,170.2,83.6,170.1,85z`)
			.attr({
				"fill": getColor(data.group2.usage)
				, "stroke": getStrokeColor(data.group2.usage)
				, "stroke-width": 1
			}).data("usage", data.group2.usage.toFixed(2))
			.data("title", data.group2.title)
			.data("unit", data.unit)
			.data("group", "group2");
		mapGroupList.push(mapGroup2);

		let mapGroup3 = paper.path(`M472.8,339.8c-1.8-0.6-3.6-1.1-5.4-1.7c-1.1-0.3-1.9-0.9-2.6-1.8c-3.2-4.3-6.6-8.6-9.8-12.9    c-1.1-1.5-2.3-2.2-4.2-2.1c-2,0.1-3.9,0-5.9,0c-0.9,0-1.3-0.3-1.2-1.3c0.1-1.7,0-3.3,0.2-5c0.1-1.4-0.5-2.2-1.7-2.9    c-3.8-2.1-7.5-4.3-11.2-6.5c-1.5-0.9-2.7-2.2-4.6-1.8c-1.7,0.3-2.8-0.5-3.7-1.8c-0.3-0.5-0.7-1-1.1-1.5c-1.1-1.4-2.5-1.9-4.3-1.6    c-2.4,0.5-4.9,0.9-7.3,1.4c-3.4,0.6-6.8,1.2-10.3,1.8c-2.7,0.4-4.3-0.9-4.6-3.5c-0.3-2.4-0.5-4.8-0.6-7.3    c-0.2-2.8-0.4-5.7-1.1-8.5c-0.8-3.4-2.8-5.2-6.3-5.8c-1.9-0.3-3.6-0.1-5.2,1.2c-5.2,4.3-10.5,8.5-15.8,12.7    c-2.1,1.7-4.5,1.1-5.6-1.4c-1.5-3.4-2.8-6.9-4.4-10.3c-1.1-2.4-2.1-5.1-4.5-6.6c-2.8-1.8-4-4.5-4.4-7.7c-0.3-2.1-0.2-4.1-0.4-6.2    c-0.5-5.4-0.6-10.8-1.4-16.1c-0.4-2.8-0.8-5.6-0.7-8.4c0-2.9-0.8-5.3-2.6-7.4c-0.3-0.4-0.5-1-1.1-1c-0.6,0.1-0.7,0.7-0.8,1.2    c-0.8,2.5-2,4.8-3.4,7c-1.2,1.9-2.2,4.1-1.6,6.2c0.9,3.4,0.6,6.8,0.5,10.2c-0.1,3-0.2,6-0.5,9c-0.6,6.4-1,12.8,1.3,19.1    c1.9,5.2,3.2,10.6,5.4,15.7c1.6,3.8,2.9,7.7,3.6,11.7c0.6,3.4,1.3,6.6,3,9.6c2,3.5,2,7.2,1.1,11c-0.3,1.1-0.9,1.5-2,1.6    c-3.2,0.3-6.4,0.6-9.6,1c-1.3,0.2-1.7-0.1-1.6-1.4c0.2-2.7-0.2-5.4-0.4-8.1c-0.2-2.6-0.3-5.3-1.4-7.8c-1.4-3.3-2.5-6.7-2.8-10.3    c-0.1-1.5-0.3-3.1-0.7-4.6c-1-4.2-1.9-8.4-3-12.6c-1-4-1.6-8.1-3.1-12c-1.5-4-2.8-8-4.2-12c-0.2-0.7-0.4-1.2,0.4-1.7    c0.8-0.5,2.1-0.4,2.3-1.6c0.2-1-0.8-1.8-1-2.7c-0.1-0.2-0.2-0.4-0.3-0.6c-0.9-1.8-1-1.9-3-1.1c-1.1,0.5-1.6,0.1-2-0.9    c-0.5-1.2-1-2.4-1.6-3.6c-2.6-5.3-4.2-11.1-7.8-15.9c-2.3-3-3.8-6.4-5.4-9.8c-0.3-0.7-0.5-1.4-0.3-2.2c1.1-3.5,0.4-5.8-2.9-7.4    c-2.5-1.2-3.6-3.2-4.7-5.4c-0.5-1.1-1.1-2.2-1.7-3.3c-5.8-11.5-11.7-23-17.6-34.5c-0.9-1.8-0.6-2.8,1.2-3.8    c4.2-2.3,8.4-4.6,12.6-6.9c2.8-1.5,4.1-5.3,2.5-8.2c-1.6-3.1-3.3-6.1-4.9-9.2c-1.2-2.3-1.9-4.7-1.6-7.3c0.7-6.1,1.5-12.1,2.3-18.2    c0.5-3.6,1-7.2-0.8-10.7c-1-1.9-2.1-3.7-3.4-5.4c-1.2-1.6-2.3-3.4-4.5-3.9c-0.7-0.2-0.8-0.9-0.9-1.5c-0.7-5.9-1.4-11.7-2.2-17.6    c-0.3-1.7,0-2.8,1.3-4c2.9-2.6,5.3-5.6,6.7-9.2c0.7-1.6,1.5-3.2,2.7-4.5c1.9-2.3,4.6-3.1,7.3-3.9c1.9-0.6,3.7-0.4,5.3,0.7    c1.8,1.3,3.6,2.6,5.3,4c0.8,0.7,1.4,0.6,2.2,0c0.9-0.7,1.7-1.4,2.8-1.6c2.9-0.7,5.2-2.5,7.5-4.3c0.9-0.7,0.8-1.2,0.2-2.2    c-2.9-4-6.4-7.7-7.2-12.9c-0.1-0.9-0.7-1.3-1.7-0.9c-1,0.4-2,0.8-3.1,1.1c-0.8,0.3-1.7,0.5-2.3-0.4c-1.6-2.5-4-3.7-6.9-4.2    c-1.1-0.2-1.7-0.1-2.3,0.8c-0.7,1-1.3,2.4-2.6,2.7c-2,0.6-4,1.3-6.1,1.2c-2.9-0.2-5.5,0.7-7.9,2c-2.1,1.1-3.8,0.7-5.3-0.8    c-0.6-0.5-1.2-1.1-1.6-1.7c-3.3-5.1-8.1-5.7-13.4-3.9c-3.3,1.1-6.3,1.4-9.5,0.4c-1.5-0.4-3.1-0.9-4.8-0.6    c-2.2,0.4-4.5,0.8-6.8,1.1c-3.8,0.5-7.5,1-11.2-0.4c-2.6-1-5.1-2.1-7.9-2.2c-0.9,0-1.7-0.3-2.4-0.9c-1.9-1.4-3.9-2.5-6.3-2.9    c-0.4-0.1-0.7-0.2-0.9-0.5c-1.1-1.7-2.6-3.1-3.2-5.1c-0.6-1.9-1.7-3.3-3.3-4.3c-2-1.3-4.1-2.5-6.1-3.7c-1.2-0.7-2-0.5-3,0.3    c-3.7,2.9-7.4,5.9-11.2,8.7c-9.5,6.8-19.1,13.5-28.7,20.2c-2.3,1.6-2.4,1.7-0.6,3.8c1.8,2,3,4.3,3.5,7c0.3,1.6,0.7,3.1,1.1,4.7    c1.1,4.3,3.8,7.6,7.2,10.3c2.9,2.4,4.5,5.6,5.9,9c0.8,1.8,1.2,3.7,1.2,5.8c-0.1,4.9,0.1,9.8-0.3,14.6c-0.2,2.5-0.2,2.7-2.8,2.8    c-3,0.1-6,0-9,0c0,0,0-0.1,0-0.1c-2.7,0-5.4,0.1-8.1,0c-3.6-0.2-5.3,1.3-5.4,4.9c-0.1,3.2-0.1,6.4-0.3,9.6c-0.2,3.9-2.4,7-5,9.6    c-4.4,4.4-8.9,8.7-13.3,13.1c-2.9,2.8-2.9,3,0,5.7c6.3,6,12.2,12.5,19.2,17.7c1.5,1.1,2.8,2.3,3.8,3.8c0.4,0.7,0.6,1.2-0.2,1.7    c-2.8,1.9-5.5,4-8.4,5.6c-4.6,2.5-9.3,5-14.1,7.3c-5,2.4-10,4.9-14.9,7.4c-3,1.5-6.3,2.8-8.8,5c-4.6,3.9-8.8,8.2-13.1,12.4    c-0.6,0.6-0.7,1.2-0.4,2c0.9,2.5,1.7,5,2.7,7.5c1.5,3.9,2.2,7.7,0.8,11.8c-1,2.8-0.6,5.7,0.9,8.4c2.7,5,6.3,9.2,9.7,13.7    c1.1,1.5,2.7,2,4.5,2.1c4.3,0.2,8.5,0.4,12.8,0.4c1,0,1.7,0.4,2,1.3c0.5,1.3,1,2.5,1.6,3.7c0.8,1.6,1.1,3.6,2.4,4.9    c2.1,2.1,3.1,4.7,3.8,7.5c1.3,5.4,0.4,10.7,0.3,16.1c0,0.6-0.4,1.2-0.9,1.6c-1.5,1.2-2.5,2.7-3.7,4.2c-1.4,1.7-1.4,3.4-0.4,5.3    c1.4,2.8,3.9,4.5,5.8,6.8c1.7,2,2.5,4.3,2.1,7c-0.5,3.1-2.1,5.8-2.3,8.9c-0.2,2.7-1,5.2-2.6,7.5c-1.5,2.2-0.7,5.4,1.4,7    c3.9,2.9,7.8,5.8,11.7,8.8c1.1,0.9,1.9,0.9,2.9-0.2c3.4-3.6,6.9-7.2,10.3-10.9c1.8-2,3.5-3,6.5-2.9c10.5,0.4,21.1,0.4,31.6,0.5    c0.2,0,0.3,0,0.5,0c1-0.1,1.2,0.3,1.1,1.3c-0.2,1.1-0.9,1.1-1.7,1.1c-3.7,0-7.4-0.1-11.1-0.3c-1-0.1-1.9,0.3-2.7,0.9    c-1.7,1.2-1.6,3-1.6,4.6c-0.2,8.4-0.3,16.7-0.4,25.1c0,1,0.4,1.4,1.3,1.5c1.6,0.1,3.2,0.2,4.8,0.4c4.1,0.5,8.3,0.2,12.1,1.8    c3.9,1.6,6.8,0.5,9.4-2.5c0.1-0.1,0.2-0.2,0.3-0.3c0.4-0.4,0.9-0.6,1.5-0.6c1.7-0.1,3.3-0.2,5-0.3c7-0.2,13.9-0.3,20.9-0.7    c3.5-0.2,7-0.1,10.4-0.5c3-0.4,5.9-0.1,8.6,1.6c2.7,1.6,5.5,3.2,8.8,3.2c1.5,0,2.9,0.4,4.2,1c2.2,1.1,5.2-0.1,6.2-2.4    c0.4-1.1,1-1.3,2.1-0.9c2.5,0.7,5.1,1,7.7,0.3c2.8-0.8,5.3-2.1,7.9-3.2c1-0.4,2-1,2.5-2c0.8-1.5,2.1-2,3.7-2.2    c5.5-0.5,11.1-1,16.6-1.6c8.4-0.9,16.7-2.1,25.3-1.6c9.4,0.5,18.7-0.8,28-2.5c11.8-2.2,23.7-4.1,35.6-6c2.7-0.4,5.3-1.1,8.2-0.6    c7.1,1.3,14.2,1.7,21.4,1.8c5.9,0.1,11.7-0.4,17.6-0.4c2.9,0,5.8,0,8.6-0.8c1.5-0.5,3.1-0.7,4.7-1c4.3-1,8.6-1.9,12.9-2.9    c0.5-0.1,1.1-0.2,1.2-0.8C473.9,340.1,473.3,339.9,472.8,339.8z M283.6,329c0,1-0.2,1.9-1.1,2.5c-1,0.7-0.8,1.7-0.8,2.7    c0.1,1.3-0.4,1.7-1.7,1.8c-8.7,0.6-17.5,1.2-26.2,1.9c-0.8,0.1-1.4,0.4-2,0.8c-1.8,1.4-3.6,1.4-5.6,0.3c-1.7-1-3.6-0.5-5.3-0.4    c-4.7,0.5-9.3,0.5-14,0.8c-5.5,0.4-11.1,0.8-16.6,1.2c-2.3,0.1-4.6,0.2-6.8,0.5c-1.1,0.2-1.2-0.5-1.2-1.3c0.2-2.9,0.3-5.8,0.7-8.7    c1.2-7.7,1.8-15.4,2.1-23.2c0.1-2.9,1.4-5.4,2-8.1c0.4-1.7,0.4-1.8-1.5-1.8c-3.5,0-7.1,0-11.1,0c-7.4,0.4-15.2-0.5-23-0.6    c-4.7-0.1-8.5-2.3-12.1-5.6c-3.5-3.2-4.4-7.4-6.2-11.3c-4-8.7-8-17.4-12.1-26.1c-2.7-5.8-5.6-11.6-8-17.6c-2.2-5.5-4.2-11-7.2-16    c-3.8-6.6-6.1-13.8-10.4-20.1c-0.5-0.7-1-1.4-1.5-2c-1.3-1.6-1.1-2.6,0.7-3.6c3.9-2,7.8-4.1,11.9-5.9c10.5-4.6,20.7-9.8,30.8-15.2    c4.7-2.5,9.6-4.5,14.2-7.1c4.5-2.5,8.2-5.9,10.3-10.9c2-4.8,5.6-8.1,10.5-9.8c2.9-1,6-1.2,9-0.2c1.7,0.6,3.4,0.4,5.1,0.3    c3.5-0.1,7-0.8,10.1-2.6c8.6-5,17.6-9,26.4-13.6c1.4-0.7,4.9,0.5,5.6,1.9c2.2,4.1,4.3,8.2,6.4,12.3c0.9,1.7,0.3,3.4-0.4,4.9    c-0.9,2.2-0.9,2.5,1.4,2.7c2.4,0.3,3.6,1.4,4.6,3.5c2,4.2,4.3,8.3,6.3,12.5c0.8,1.5,0.6,3.3,1.8,4.8c4.3,5.5,6.7,12.1,9.9,18.3    c3.8,7.2,7.4,14.5,11,21.8c1.3,2.5,0.8,3.8-1.8,4.9c-9.6,4.3-19.2,8.5-28.7,12.8c-4.7,2.1-9.4,4.2-14.1,6.3    c-0.9,0.4-1.8,0.4-2.7-0.1c-2.4-1.2-3.7-0.7-4.8,1.7c-1,2.3-2,4.7-3.1,7c-0.5,1-0.4,1.7,0.5,2.3c0.5,0.3,0.9,0.8,1.4,0.9    c2.8,0.7,3.4,3.1,4.1,5.4c1.6,5.8,1.9,11.8,2.2,17.7c0.4,6.6,0.7,13.3,1,19.9c0,0.6,0,1.2-0.3,1.8c-1.1,1.8-0.1,6.2,1.5,7.5    c1.5,1.2,3.4,1.2,4.9,0.4c2-1.2,4.2-1.3,6.3-1.4c6-0.3,11.9-1.1,17.8-2.1c2.7-0.5,3-0.3,4,2.3c1.5,3.9,3.7,7.6,5,11.6    c0.4,1.2,0.6,2.3,0.5,3.6C283.6,320,283.6,324.5,283.6,329z`)
			.attr({
				"fill": getColor(data.group3.usage)
				, "stroke": getStrokeColor(data.group3.usage)
				, "stroke-width": 1
			}).data("usage", data.group3.usage.toFixed(2))
			.data("title", data.group3.title)
			.data("unit", data.unit)
			.data("group", "group3");
		mapGroupList.push(mapGroup3);
		
		//$("#" + targetDomId).mousemove(function (location) {
		//	tooltipDom.css("top", location.pageY - $(this).offset().top - 30);
		//	tooltipDom.css("left", location.pageX - $(this).offset().left + 10);
		//});

		let mapGroup1CenterX = (mapGroup1.getBBox().x2 + mapGroup1.getBBox().x) / 2;
		let mapGroup1CenterY = (mapGroup1.getBBox().y2 + mapGroup1.getBBox().y) / 2;
		let mapGroup1Text = paper.text(mapGroup1CenterX, mapGroup1CenterY, mapGroup1.getData().title).attr({
			"fill": "black"
			, "font-size": 16
			, "font-family": "NanumSquare"
			, "font-weight": 800
		});

		let mapGroup2CenterX = (mapGroup2.getBBox().x2 + mapGroup2.getBBox().x) / 2;
		let mapGroup2CenterY = (mapGroup2.getBBox().y2 + mapGroup2.getBBox().y) / 2;
		let mapGroup2Text = paper.text(mapGroup2CenterX, mapGroup2CenterY, mapGroup2.getData().title).attr({
			"fill": "black"
			, "font-size": 16
			, "font-family": "NanumSquare"
			, "font-weight": 800
		});

		let mapGroup3CenterX = (mapGroup3.getBBox().x2 + mapGroup3.getBBox().x) / 2;
		let mapGroup3CenterY = (mapGroup3.getBBox().y2 + mapGroup3.getBBox().y) / 2;
		let mapGroup3Text = paper.text(mapGroup3CenterX - 60, mapGroup3CenterY - 100, mapGroup3.getData().title).attr({
			"fill": "black"
			, "font-size": 16
			, "font-family": "NanumSquare"
			, "font-weight": 800
		});

		let mapGroupTextList = {
			group1: mapGroup1Text
			, group2: mapGroup2Text
			, group3: mapGroup3Text
		};

		let cloneList = [];
		let cloneTextList = [];
		let effectIdx = 0;
		function initEffect(){
			effectIdx = 0;
			for(var i=0 ; i<cloneList.length ; i++){
				cloneList[i].remove();
			}
			cloneList = [];
			for(var i=0 ; i<cloneTextList.length ; i++){
				cloneTextList[i].remove();
			}
			cloneTextList = [];
		}
		
		function overEffect(object){
			initEffect();
			let effectInterval = null;
			if(effectInterval != null){
				clearInterval(effectInterval);
			}
			effectInterval = setInterval(function(){
				if(!document.hidden){
					let paperId = $(paper.canvas).attr("id");
					if($("#" + paperId).length == 0){
						clearInterval(effectInterval);
					}
					let cloneObj = object.clone();
					cloneObj.translate(0, effectIdx * -1);
					cloneList.push(cloneObj);

					let group = object.getData().group;
					let currentText = mapGroupTextList[group];
					currentText.attr({opacity: 0});

					if(typeof cloneTextList[effectIdx-1] != "undefined"){
						cloneTextList[effectIdx-1].attr({opacity: 0});
					}

					let cloneText = currentText.clone();
					cloneText.attr({opacity: 1});
					cloneText.translate(0, effectIdx * -1);
					cloneTextList.push(cloneText);

					effectIdx++;
					if(effectIdx == 20){
						clearInterval(effectInterval);
						let title = object.getData().title;
						let usage = object.getData().usage;
						let unit = object.getData().unit;
						tooltipDom.html("<p style='font-weight: bold;'>사용량 : " + usage + " " + unit + "</p>");
						
						switch(object.getData().group){
						case "group1" :
							tooltipDom.css("top", "60%");
							tooltipDom.css("margin-left", "50%");
							break;
						case "group2" :
							tooltipDom.css("top", "32%");
							tooltipDom.css("margin-left", "27%");
							break;
						case "group3" :
							tooltipDom.css("top", "23%");
							tooltipDom.css("margin-left", "53%");
							break;
						}
						
						tooltipDom.show();
					}
				}
			});
			// }, 10);
		}

		let animateIdx = 0;
		animateInterval = setInterval(function(){
			if(!document.hidden){
				let paperId = $(paper.canvas).attr("id");
				if($("#" + paperId).length == 0){
					clearInterval(animateInterval);
				}
				tooltipDom.hide();
				let animateTargetIdx = (animateIdx % 3);
				let animateTargetObj = mapGroupList[animateTargetIdx];
				
				let beforeTextIdx = 0;
				if(animateTargetIdx == 0){
					beforeTextIdx = 3;
				}else{
					beforeTextIdx = animateTargetIdx;
				}

				let beforeTextObj = mapGroupTextList["group" + beforeTextIdx];
				if(typeof beforeTextObj != "undefined"){
					beforeTextObj.attr({opacity: 1});
				}
				overEffect(animateTargetObj);
				if(animateTargetIdx == 2){
					categoryFlag = true;
				}
				animateIdx++;
			}
		}, 2000);

		// mapGroup1.hover(function () {
		// 	let title = this.getData().title;
		// 	let usage = this.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();
			
		// 	overEffect(this);

		// }, function () {
		// 	tooltipDom.hide();
		// 	initEffect();
		// });
		// mapGroup1Text.hover(function () {
		// 	let title = mapGroup1.getData().title;
		// 	let usage = mapGroup1.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();
		// }, function () {
		// 	tooltipDom.hide();
		// });
		// mapGroup2.hover(function () {
		// 	let title = this.getData().title;
		// 	let usage = this.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();

		// 	overEffect(this);

		// }, function () {
		// 	tooltipDom.hide();
		// 	initEffect();
		// });
		// mapGroup2Text.hover(function () {
		// 	let title = mapGroup2.getData().title;
		// 	let usage = mapGroup2.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();
		// }, function () {
		// 	tooltipDom.hide();
		// });
		// mapGroup3.hover(function () {
		// 	let title = this.getData().title;
		// 	let usage = this.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();

		// 	overEffect(this);
			
		// }, function () {
		// 	tooltipDom.hide();
		// 	initEffect();
		// });
		// mapGroup3Text.hover(function () {
		// 	let title = mapGroup3.getData().title;
		// 	let usage = mapGroup3.getData().usage;
		// 	tooltipDom.text(title + " 사용량 : " + usage + "kWh");
		// 	tooltipDom.show();
		// }, function () {
		// 	tooltipDom.hide();
		// });

	}

	let initObject = initContentsDraw(widget);

	let width = parseInt(initObject.dom.parent().css("width").replace("px", ""));
	let height = parseInt(initObject.dom.parent().css("height").replace("px", ""));

	let categoryFlag = false;
	let rotateFlag = true;

//	$.ajax({
//		url: CTX + "/manage/getScreenDataAjax?mainNo=1"
//		, method: "GET"
//		, dataType: "json"
//		, success: function (result) {
//			if (result.status == true) {
				let ttt_e = {
					group1: { usage: Math.random() * 300 , title: "혁신벤처스타트업\nZone" }
					, group2: { usage: Math.random() * 300 , title: "비지니스 앵커\nZone" }
					, group3: { usage: Math.random() * 300 , title: "스마트리빙\nZone" }
					, energyType: "elec"
					, unit: "kWh"
				}
				let ttt_w = {
					group1: { usage: Math.random() * 300 , title: "혁신벤처스타트업\nZone" }
					, group2: { usage: Math.random() * 300 , title: "비지니스 앵커\nZone" }
					, group3: { usage: Math.random() * 300 , title: "스마트리빙\nZone" }
					, energyType: "water"
					, unit: "㎥"
				}
				let ttt_g = {
					group1: { usage: Math.random() * 300 , title: "혁신벤처스타트업\nZone" }
					, group2: { usage: Math.random() * 300 , title: "비지니스 앵커\nZone" }
					, group3: { usage: Math.random() * 300 , title: "스마트리빙\nZone" }
					, energyType: "gas"
					, unit: "MJ"
				}
				let ttt_h = {
					group1: { usage: Math.random() * 300 , title: "혁신벤처스타트업\nZone" }
					, group2: { usage: Math.random() * 300 , title: "비지니스 앵커\nZone" }
					, group3: { usage: Math.random() * 300 , title: "스마트리빙\nZone" }
					, energyType: "heat"
					, unit: "Mcal"
				}

				let energyList = [ttt_e, ttt_w, ttt_g, ttt_h];



				let rphWidth = 468 + 15;
				let rphHeight = 361 + 15;

				let parentWidth = parseFloat($("#" + initObject.id).css("width").replace("px", ""));
				let parentHeight = parseFloat($("#" + initObject.id).css("height").replace("px", ""));

				$("#" + initObject.id).css("width", (energyList.length * 100) + "%");
				$("#" + initObject.id).parent().css("overflow", "hidden");

				// let marginLeft = parseInt(parentWidth.replace("px", ""));
				// let marginIdx = 0;
				// setInterval(function(){
					// marginIdx++;
					// let margin = -1 * marginLeft * (marginIdx % energyList.length);
					// $("#" + initObject.id).animate({
						// "margin-left": margin
					// }, 500);
				// }, 7500);
				

				let playBox = $("<div />");
				playBox.css("position", "absolute");
				// playBox.css("width", "20%");
				playBox.css("height", "30px");
				playBox.css("top", "0px");
				playBox.css("right", "5px");
				$("#" + initObject.id).parent().append(playBox);

				let playStonBtn = $("<div />");
				playStonBtn.attr("id", initObject.id + "-playStopBtn");
				playStonBtn.css("display", "inline-block");
				playStonBtn.css("cursor", "pointer");
				playStonBtn.css("width", "35px");
				playStonBtn.css("height", "35px");
				playStonBtn.css("background-image", "url(../img/pause.png)");
				playStonBtn.css("background-repeat", "no-repeat");
				playStonBtn.on("click", function(){
					let btn = this;
					let handleFlag = false;
					$(".rotate-point").each(function(idx, item){
						if($(item).attr("id").indexOf(initObject.id + "-point-") > -1 && handleFlag == false){
							if(rotateFlag){
								rotateFlag = false;
								$(btn).css("background-image", "url(../img/play.png)");
							}else{
								rotateFlag = true;
								$(btn).css("background-image", "url(../img/pause.png )");
							}
							handleFlag = true;
						}
					});
				});

				function setRotateMap(){
					let margin = -1 * marginLeft * (marginIdx % energyList.length);
					$("#" + initObject.id).animate({
						"margin-left": margin
					}, 500, function(){
						let targetPointId = initObject.id + "-point-" + energyList[(marginIdx % energyList.length)].energyType;
						$(".rotate-point").each(function(){
							let beforeBackground = $(this).css("background-image");
							$(this).css("background-image", beforeBackground.replace("active-energy-icon", "energy-icon"));
							if($(this).attr("id") == targetPointId){
								$(this).css("background-image", beforeBackground.replace("active-energy-icon", "energy-icon").replace("energy-icon", "active-energy-icon"));
							}
						});
					});
				}

				playBox.append(playStonBtn);

				let rotatePointBox = $("<div />");
				rotatePointBox.css("position", "absolute");
				// rotatePointBox.css("height", "50px");
				rotatePointBox.css("top", "0");
				rotatePointBox.css("right", "50px");
				rotatePointBox.css("text-align", "center");
				$("#" + initObject.id).parent().append(rotatePointBox);


				for(var i=0 ; i<energyList.length ; i++){
					drawBase(initObject.id, initObject.id + "-" + energyList[i].energyType, energyList[i], param.colorList, parentWidth, parentHeight, param.legend);
					$("#" + initObject.id + "-" + energyList[i].energyType + "-base").css("width", width - 60);
					$("#" + initObject.id + "-" + energyList[i].energyType + "-base").css("margin-top", 30);
					$("#" + initObject.id + "-" + energyList[i].energyType + "-base").css("height", height - 60);
					$("#" + initObject.id + "-" + energyList[i].energyType + "-base").css("margin-left", 30);
					$("#" + initObject.id + "-" + energyList[i].energyType + "-base").attr("viewBox", "0 0 " + rphWidth + " " + rphHeight);

					
					let rotatePointLabel = $("<span />");
					rotatePointLabel.attr("id", initObject.id + "-point-" + energyList[i].energyType);
					rotatePointLabel.addClass("rotate-point");
					rotatePointLabel.css("width", "80px");
					rotatePointLabel.css("height", "30px");
					rotatePointLabel.css("display", "inline-block");
					rotatePointLabel.css("margin", "0px ");
					rotatePointLabel.css("background-size", "contain");
					rotatePointLabel.css("background-repeat", "no-repeat");
					rotatePointLabel.css("vertical-align", "middle");
					rotatePointLabel.attr("data-target-point", "point-" + i);
					// rotatePointLabel.css("vertical-align", "middle");
					// rotatePointLabel.html(energyList[i].energyType);
					if(i == 0){
						rotatePointLabel.css("background-image", "url(../img/active-energy-icon-" + energyList[i].energyType + ".png");
					}else{
						rotatePointLabel.css("background-image", "url(../img/energy-icon-" + energyList[i].energyType + ".png");
					}
					rotatePointLabel.css("background-position", "100% 0");



					
					rotatePointLabel.css("cursor", "pointer");
					rotatePointLabel.on("click", function(){
						if(rotateFlag == true){
							$("#" + initObject.id + "-playStopBtn").trigger("click");
						}
						let targetPoint = parseInt($(this).attr("data-target-point").replace("point-", ""));
						marginIdx = targetPoint;
						setRotateMap();
					});

					rotatePointBox.append(rotatePointLabel);
				}

				
				let marginIdx = 0;
				let marginLeft = parseInt(parentWidth);
				setInterval(function(){
					if(categoryFlag && rotateFlag){
						categoryFlag = false;
						setTimeout(function(){
							marginIdx++;
							setRotateMap();
						}, 1500);
					}
				}, 100);

//			} else {
//				alert(result.message);
//			}
//		}
//		, error: function (xhr, stat, err) {
//			console.log(xhr);
//			console.log(stat);
//			console.log(err);
//		}
//	});
}

/**
 * 에너지 자립률 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawEnergySaveRate(param, widget){
	let initObject = initContentsDraw(widget);

	// asdf
	// console.log(param);
	//$.ajax({
	//	url: CTX + "/manage/getScreenDataAjax?mainNo=1"
	//	, method: "GET"
	//	, dataType: "json"
	//	, success: function (result) {
	//		if (result.status == true) {

				let todaySaveRate = 5.423454365;
				let yesterdaySaveRate = 10.2315323;



				let todayWrap = $("<div />");
				todayWrap.css("display", "block");
				todayWrap.css("margin-bottom", "20px");

				let todayPrefix = $("<span />");
				todayPrefix.css("font-size", "25px");
				todayPrefix.css("color", "white");
				// todayPrefix.css("text-shadow", "0 0 5px black");
				todayPrefix.css("padding", "0 15px");
				todayPrefix.css("font-weight", "600");
				todayPrefix.text("당일");

				let todayValue = $("<span />");
				todayValue.css("font-size", "54px");
				todayValue.css("color", "#61f9f9");
				todayValue.css("letter-spacing", "-1px");
				// todayValue.css("text-shadow", "0 0 5px black");
				todayValue.css("font-weight", "bold");
				todayValue.text(todaySaveRate.toFixed(param.roundingDigits));

				let todaySufix = $("<span />");
				todaySufix.css("font-size", "20px");
				todaySufix.css("font-weight", "400");
				todaySufix.css("color", "#61f9f9");
				// todaySufix.css("text-shadow", "0 0 5px black");
				todaySufix.css("padding", "0 8px");
				todaySufix.text("%");

				todayWrap.append(todayPrefix);
				todayWrap.append(todayValue);
				todayWrap.append(todaySufix);

				let yesterdayWrap = $("<div />");
				yesterdayWrap.css("display", "block");
				yesterdayWrap.css("margin", "10px 0");

				let yesterdayPrefix = $("<span />");
				yesterdayPrefix.css("border", "1px solid #a1f5f9");
				yesterdayPrefix.css("border-radius", "14px");
				yesterdayPrefix.css("padding", "6px 14px");
				yesterdayPrefix.css("font-size", "21px");
				yesterdayPrefix.css("margin-right", "14px");
				yesterdayPrefix.css("color", "#a1f5f9");
				yesterdayPrefix.text("전일대비");

				let yesterdayValue = $("<span />");
				yesterdayValue.css("font-size", "34px");
				yesterdayValue.css("vertical-align", "middle");
				yesterdayValue.css("font-weight", "800");
				yesterdayValue.css("color", "rgb(243, 133, 120)");
				// yesterdayValue.css("text-shadow", "0 0 5px white");
				yesterdayValue.text(yesterdaySaveRate.toFixed(param.roundingDigits));

				let yesterdaySufix = $("<span />");
				yesterdaySufix.css("font-size", "30px");
				yesterdaySufix.css("padding", "0 15px");
				yesterdaySufix.css("vertical-align", "middle");
				yesterdaySufix.css("color", "rgb(243, 133, 120)");
				yesterdaySufix.css("font-weight", "bold");
				// yesterdaySufix.css("text-shadow", "0 0 5px lightgrey");
				yesterdaySufix.text("감소▼");

				yesterdayWrap.append(yesterdayPrefix);
				yesterdayWrap.append(yesterdayValue);
				yesterdayWrap.append(yesterdaySufix);


				initObject.dom.append(todayWrap);
				initObject.dom.append(yesterdayWrap);
	//		} else {
	//			alert(result.message);
	//		}
	//	}
	//	, error: function (xhr, stat, err) {
	//		console.log(xhr);
	//		console.log(stat);
	//		console.log(err);
	//	}
	//});
}
/**
 * 기상정보률 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawWeatherInfo(param, widget){
	let initObject = initContentsDraw(widget);

	// asdf
	// console.log(param);
	//$.ajax({
	//	url: CTX + "/manage/getScreenDataAjax?mainNo=1"
	//	, method: "GET"
	//	, dataType: "json"
	//	, success: function (result) {
	//		if (result.status == true) {

				

				initObject.dom.append("<p>기상정보 넣을 예정</p>");
	//		} else {
	//			alert(result.message);
	//		}
	//	}
	//	, error: function (xhr, stat, err) {
	//		console.log(xhr);
	//		console.log(stat);
	//		console.log(err);
	//	}
	//});
}
function makeBoardParts(resultData, param, widget){
	let widgetWidth = parseInt(widget.css("width").replace("px", ""));
	if(resultData.data.length > 0){
		for(var i=0 ; i<resultData.data.length ; i++){
			let entry = "";
			let ymdText = resultData.data[i].input_date.split(" ")[0];
			entry = $("<div />");
			entry.css("width", "100%");
			if(param.entryClick){
				entry.css("cursor", "pointer");
				entry.on("mouseenter", function(){
					entry.css("background", "rgba(255, 255, 255, 0.3)");
				});
				entry.on("mouseleave", function(){
					entry.css("background", "none");
				});
				let entryData = resultData.data[i];
				entry.on("click", function(){
					let boardType = "0001";
					let menuId = "M090100";
					if(typeof param.boardType != "undefined"){
						boardType = param.boardType;
					}
					if(typeof param.menuId != "undefined"){
						menuId = param.menuId;
					}
					location.href = CTX + "/board/content?menu-id="+menuId+"&boardType="+boardType+"&boardNo="+entryData.board_no+"&searchTitle=&searchWriter=&searchStartDate=&searchEndDate=&page=1&rows=10";
				});
			}
			if(i > 0){
				entry.css("border-top", "1px solid #ececec");
				
			}
			switch(param.listType){
			case "large":
				entry.css("padding", "0px");
				
				let datePartsLarge = $("<div />");
				// datePartsLarge.css("height", "80px");
				datePartsLarge.css("width", "70px");
				datePartsLarge.css("float", "left");
				datePartsLarge.css("padding", "10px 0");
				
				let dateDivLarge = $("<p />");
				dateDivLarge.css("width", "70px");
				dateDivLarge.css("color", "#4a90e4");
				dateDivLarge.css("font-weight", "600");
				dateDivLarge.css("font-size", "30px");
				dateDivLarge.css("line-height", "36px");
				dateDivLarge.text(ymdText.split("-")[2]);
				dateDivLarge.css("text-align", "center");
				dateDivLarge.css("letter-spacing", "-2px");
				dateDivLarge.css("text-shadow", "1px 1px 0px white");
				
				let yearMonthDivLarge = $("<p />");
				yearMonthDivLarge.css("width", "70px");
				yearMonthDivLarge.css("color", "#929292");
				yearMonthDivLarge.css("font-size", "12px");
				yearMonthDivLarge.css("line-height", "16px");
				yearMonthDivLarge.css("text-shadow", "1px 1px 0px white");
				yearMonthDivLarge.css("font-weight", "500");
				yearMonthDivLarge.css("letter-spacing", "-1px");
				yearMonthDivLarge.text(ymdText.split("-")[0] + "." + ymdText.split("-")[1]);
				yearMonthDivLarge.css("text-align", "center");

				datePartsLarge.append(dateDivLarge);
				datePartsLarge.append(yearMonthDivLarge);


				let articlePartsBoxLarge = $("<div />");

				let articlePartsLarge = $("<p />");
				articlePartsLarge.css("padding", "0 10px");
				// articlePartsLarge.css("height", "60px");
				articlePartsLarge.css("width", (widgetWidth - 100) +"px");
				articlePartsLarge.css("line-height", "28px");
				articlePartsLarge.css("white-space", "nowrap");
				articlePartsLarge.css("text-overflow", "ellipsis");
				articlePartsLarge.css("overflow", "hidden");
				articlePartsLarge.css("font-size", "16px");
				articlePartsLarge.css("color", "#666");
				articlePartsLarge.css("font-weight", "600");
				articlePartsLarge.css("text-shadow", "1px 1px 0px white");
				articlePartsLarge.css("float", "left");
				articlePartsLarge.css("margin", "10px 15px 0px 15px");
				articlePartsLarge.text(resultData.data[i].board_title);
				articlePartsLarge.css("text-align", "left");



				let articleContentsPartsLarge = $("<span />");
				articleContentsPartsLarge.css("padding", "0 10px");
				// articleContentsPartsLarge.css("height", "60px");
				articleContentsPartsLarge.css("width", (widgetWidth - 100) +"px");
				articleContentsPartsLarge.css("line-height", "28px");
				articleContentsPartsLarge.css("height", "28px");
				articleContentsPartsLarge.css("white-space", "nowrap");
				articleContentsPartsLarge.css("text-overflow", "ellipsis");
				articleContentsPartsLarge.css("overflow", "hidden");
				articleContentsPartsLarge.css("font-size", "14px");
				articleContentsPartsLarge.css("color", "#888");
				articleContentsPartsLarge.css("font-weight", "500");
				articleContentsPartsLarge.css("text-shadow", "1px 1px 0px white");
				articleContentsPartsLarge.css("margin", "0px 15px 10px 15px");
				articleContentsPartsLarge.css("display", "inline-block");
				articleContentsPartsLarge.html(resultData.data[i].board_content);
				articleContentsPartsLarge.css("text-align", "left");
				
				articlePartsBoxLarge.append(articlePartsLarge);
				articlePartsBoxLarge.append(articleContentsPartsLarge);

				entry.append(datePartsLarge);
				entry.append(articlePartsBoxLarge);
			
				break;
			case "medium":
				let articlePartsMedium = $("<p />");
				articlePartsMedium.css("height", "58px");
				articlePartsMedium.css("width", (widgetWidth - 120) +"px");
				articlePartsMedium.css("line-height", "58px");
				articlePartsMedium.css("float", "left");
				articlePartsMedium.css("white-space", "nowrap");
				articlePartsMedium.css("text-overflow", "ellipsis");
				articlePartsMedium.css("overflow", "hidden");
				articlePartsMedium.css("font-size", "16px");
				articlePartsMedium.css("font-weight", "600");
				articlePartsMedium.css("text-shadow", "1px 1px 0px white");
				articlePartsMedium.css("color", "#333");
				articlePartsMedium.css("padding", "0px 5px");
				articlePartsMedium.text(resultData.data[i].board_title);
				articlePartsMedium.css("text-align", "left");

				articlePartsMedium.text(resultData.data[i].board_title);
				
				let datePartsMedium = $("<p />");
				datePartsMedium.css("height", "58px");
				datePartsMedium.css("width", "120px");
				datePartsMedium.css("float", "left");
				datePartsMedium.css("color", "#666");
				datePartsMedium.css("font-size", "13px");
				datePartsMedium.css("font-weight", "600");
				datePartsMedium.css("text-shadow", "1px 1px 0px white");
				datePartsMedium.css("padding-right", "10px");
				datePartsMedium.css("line-height", "58px");
				datePartsMedium.text(ymdText.split("-")[0] + "." + ymdText.split("-")[1]);
				datePartsMedium.css("text-align", "right");
				

				datePartsMedium.text(ymdText);

				entry.append(articlePartsMedium);
				entry.append(datePartsMedium);
				break;
			case "small":
				let articlePartsLabelSmall = $("<span />");
				articlePartsLabelSmall.css("float", "left");
				articlePartsLabelSmall.css("width", "4px");
				articlePartsLabelSmall.css("height", "4px");
				articlePartsLabelSmall.css("background-color", "#a8a8a8");
				articlePartsLabelSmall.css("margin", "17px 2px 17px 11px");
				articlePartsLabelSmall.css("border-radius", "36px");

				let articlePartsSmall = $("<p />");
				articlePartsSmall.css("height", "38px");
				articlePartsSmall.css("width", widgetWidth - 30 +"px");
				articlePartsSmall.css("line-height", "38px");
				articlePartsSmall.css("float", "left");
				articlePartsSmall.css("white-space", "nowrap");
				articlePartsSmall.css("text-overflow", "ellipsis");
				articlePartsSmall.css("overflow", "hidden");
				articlePartsSmall.css("color", "#666");
				articlePartsSmall.css("font-size", "14px");
				articlePartsSmall.css("font-weight", "500");
				articlePartsSmall.css("padding", "0px 10px");
				articlePartsSmall.css("text-shadow", "1px 1px 0px white");
				articlePartsSmall.text(resultData.data[i].board_title);
				articlePartsSmall.css("text-align", "left");

				articlePartsSmall.text(resultData.data[i].board_title);
				

				entry.append(articlePartsLabelSmall);
				entry.append(articlePartsSmall);
				break;
			}
			widget.append(entry);
			widget.css("overflow", "hidden");
		}
	}
}
/**
 * 공지사항을 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawNotice(param, widget){
	let initObject = initContentsDraw(widget);

	let searchParam = {
		boardType: "0001"
		, page: 1
		, rows: 3
	}

	switch(param.listType){
	case "large":
		searchParam.page = 1;
		searchParam.rows = 3;
		break;
	case "medium":
		searchParam.page = 1;
		searchParam.rows = 5;
		break;
	case "small":
		searchParam.page = 1;
		searchParam.rows = 8;
		break;
	}

	$.ajax({
		url: CTX + "/board/getBoardArticleListAjax"
		, method: "POST"
		, dataType: "json"
		, data: JSON.stringify(searchParam)
		, success: function (resultData) {
			if (resultData.status == true) {
				makeBoardParts(resultData, param, initObject.dom);
			} else {
				alert(resultData.message);
			}
		}
		, error: function (xhr, stat, err) {
			console.log(xhr);
			console.log(stat);
			console.log(err);
		}
	});
}
/**
 * 게시판을 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawBoard(param, widget){
	let initObject = initContentsDraw(widget);

	let searchParam = {
		boardType: param.boardType
		, page: 1
		, rows: 3
	}

	switch(param.listType){
	case "large":
		searchParam.page = 1;
		searchParam.rows = 3;
		break;
	case "medium":
		searchParam.page = 1;
		searchParam.rows = 5;
		break;
	case "small":
		searchParam.page = 1;
		searchParam.rows = 8;
		break;
	}

	$.ajax({
		url: CTX + "/board/getBoardArticleListAjax"
		, method: "POST"
		, dataType: "json"
		, data: JSON.stringify(searchParam)
		, success: function (resultData) {
			if (resultData.status == true) {
				makeBoardParts(resultData, param, initObject.dom);
			} else {
				alert(resultData.message);
			}
		}
		, error: function (xhr, stat, err) {
			console.log(xhr);
			console.log(stat);
			console.log(err);
		}
	});
}
/**
 * 노티피케이션을 그리는 함수
 * @param {object} param 
 * @param {DOM element} widget 
 */
function drawNotification(param, widget){
	let initObject = initContentsDraw(widget);

	// asdf
	// console.log(param);
	//$.ajax({
	//	url: CTX + "/manage/getScreenDataAjax?mainNo=1"
	//	, method: "GET"
	//	, dataType: "json"
	//	, success: function (result) {
	//		if (result.status == true) {

				let notiData = [
					{ notiType: "error" , notiName: "혜윰상가 발전기고장" , notiDate: "2020.02.17 14:24:08" }
					, { notiType: "info" , notiName: "혜윰시티 발전기 정상작동" , notiDate: "2020.02.17 14:24:08" }
					, { notiType: "warn" , notiName: "혜윰시티 발전기 위험경고" , notiDate: "2020.02.17 14:24:08" }
				];

				if(notiData.length > 0){
					for(var i=0 ; i<notiData.length ; i++){
						let notiEntry = $("<div />");
						notiEntry.css("width", "100%");
						notiEntry.css("height", "30%");
						if((i+1) < notiData.length){
							notiEntry.css("border-bottom", "1px dashed rgba(53, 53, 53, 0.19)");
						}
						initObject.dom.append(notiEntry);
						let entryHeight = notiEntry.height();
						let entryWidth = notiEntry.width();

						let notiType = $("<div />");
						notiType.html("&nbsp;");
						notiType.css("display", "inline-block");
						notiType.css("height", entryHeight + "px");
						notiType.css("line-height", entryHeight + "px");
						
						notiEntry.append(notiType);

						let notiTypeIcon = $("<div />");
						notiTypeIcon.css("display", "inline-block");
						notiTypeIcon.css("background-image", "url(" + CTX + "/img/icon/alert-ico-" + notiData[i].notiType + ".png)");
						notiTypeIcon.css("background-repeat", "no-repeat");
						notiTypeIcon.css("background-position", "center");
						notiTypeIcon.css("background-color", "rgba(255, 255, 255, 0.15)");
						notiTypeIcon.css("vertical-align", "middle");
						notiTypeIcon.css("margin-right", "20px");
						notiTypeIcon.css("width", "40px");
						notiTypeIcon.css("height", "40px");
						notiTypeIcon.css("border-radius", "24px");
						notiType.append(notiTypeIcon);

						let notiName = $("<div />");
						notiName.text(notiData[i].notiName);
						notiName.css("display", "inline-block");
						notiName.css("height", entryHeight + "px");
						notiName.css("line-height", entryHeight + "px");
						notiName.css("font-size", "18px");
						notiName.css("font-weight", "bold");
						notiName.css("letter-spacing", "-1px");
						notiName.css("width", ( entryWidth - 200 ) + "px");
						notiName.css("white-space", "nowrap");
						notiName.css("text-overflow", "ellipsis");
						notiName.css("overflow", "hidden");
						notiName.css("vertical-align", "middle");
						notiName.css("color", "#fff");
						notiEntry.append(notiName);

						let notiDate = $("<div />");
						notiDate.text(notiData[i].notiDate);
						// notiDate.addClass("notiColor-" + notiData[i].notiType);
						notiDate.css("display", "inline-block");
						notiDate.css("height", entryHeight + "px");
						notiDate.css("line-height", entryHeight + "px");
						notiDate.css("font-size", "14px");
						notiDate.css("font-weight", "bold");
						notiDate.css("letter-spacing", "-1px");
						switch(notiData[i].notiType){
						case "error" : // 빨간색
							notiDate.css("color", "#F3494C");
							break;
						case "info" : // 초록색
							notiDate.css("color", "#4CCD0F");
							break;
						case "warn" : // 노란색
							notiDate.css("color", "#FEE414");
							break;
						}
						// notiDate.css("text-shadow", "0 0 5px white");
						notiEntry.append(notiDate);

					}
				}else{
					initObject.dom.append("<p>알람 및 이벤트가 없습니다.</p>");
				}

				//initObject.dom.append("<p>알람 / 이벤트 등 노티피케이션 넣을 예정</p>");
	//		} else {
	//			alert(result.message);
	//		}
	//	}
	//	, error: function (xhr, stat, err) {
	//		console.log(xhr);
	//		console.log(stat);
	//		console.log(err);
	//	}
	//});
}













function drawWorking(param, widget){
	let initObject = initContentsDraw(widget);
	// asdf
	// console.log(param);
	initObject.dom.append("<p>개발 중 입니다.</p>");
}